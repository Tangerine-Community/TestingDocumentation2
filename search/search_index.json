{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome to the Tangerine Documentation site. This is an MDWiki hosted on Github Pages. Find the source for this in the Tangerine docs folder on Github. Editor Guide Data Collector Guide System Administrator Guide Developer Guide User Guide testing 12","title":"Home"},{"location":"#home","text":"Welcome to the Tangerine Documentation site. This is an MDWiki hosted on Github Pages. Find the source for this in the Tangerine docs folder on Github. Editor Guide Data Collector Guide System Administrator Guide Developer Guide User Guide testing 12","title":"Home"},{"location":"CONTRIBUTING/","text":"How to contribute documentation \u00b6","title":"How to contribute documentation"},{"location":"CONTRIBUTING/#how-to-contribute-documentation","text":"","title":"How to contribute documentation"},{"location":"artwork/icons/","text":"Icons for v3 \u00b6 Gimp source and examples of icons are in the icon-source directory adjacent to this file.","title":"Icons for v3"},{"location":"artwork/icons/#icons-for-v3","text":"Gimp source and examples of icons are in the icon-source directory adjacent to this file.","title":"Icons for v3"},{"location":"data-collector/","text":"Data Collector Guide \u00b6 Using P2P Sync for Offline Data Transfer More coming soon!","title":"Data Collector Guide"},{"location":"data-collector/#data-collector-guide","text":"Using P2P Sync for Offline Data Transfer More coming soon!","title":"Data Collector Guide"},{"location":"developer/","text":"Developer Guide Contents \u00b6 i18n-translation.md modules.md Application design \u00b6 Viewing Forms and Form Data Supporting custom elements Tangerine Globals Debugging \u00b6 debugging-reporting.md debugging_node_apps.md Load Testing \u00b6 Load Testing Developing Cordova Plugins \u00b6 cordova-plugin-development.md Tangerine Class Projects \u00b6 class-docs.md class-deletions.md Troubleshooting \u00b6 Docker Network Issues","title":"Developer Guide Contents"},{"location":"developer/#developer-guide-contents","text":"i18n-translation.md modules.md","title":"Developer Guide Contents"},{"location":"developer/#application-design","text":"Viewing Forms and Form Data Supporting custom elements Tangerine Globals","title":"Application design"},{"location":"developer/#debugging","text":"debugging-reporting.md debugging_node_apps.md","title":"Debugging"},{"location":"developer/#load-testing","text":"Load Testing","title":"Load Testing"},{"location":"developer/#developing-cordova-plugins","text":"cordova-plugin-development.md","title":"Developing Cordova Plugins"},{"location":"developer/#tangerine-class-projects","text":"class-docs.md class-deletions.md","title":"Tangerine Class Projects"},{"location":"developer/#troubleshooting","text":"Docker Network Issues","title":"Troubleshooting"},{"location":"developer/class-deletions/","text":"Deletions in Tangerine \u00b6 We're archiving records instead of deleting them in Tangerine by setting archive:true on the root of the doc and filtering queries by && !archive . For most queries, you simply must simply append && !archive to the query in order to ensure your views filter for the archive flag. Sample view that filters by archive: responsesByClassIdCurriculumId: { map: function (doc) { if (doc.hasOwnProperty('collection') && doc.collection === 'TangyFormResponse' && !doc.archive) { if (doc.hasOwnProperty('metadata') && doc.metadata.studentRegistrationDoc.classId) { // console.log(\"matching: \" + doc.metadata.studentRegistrationDoc.classId) emit([doc.metadata.studentRegistrationDoc.classId, doc.form.id], true); } } }.toString() }, Sample function to archive some records: async archiveStudent(column) { let studentId = column.id console.log(\"Archiving student:\" + studentId) let deleteConfirmed = confirm(_TRANSLATE(\"Delete this student?\")); if (deleteConfirmed) { try { let responses = await this.classViewService.getResponsesByStudentId(studentId) for (const response of responses as any[] ) { response.doc.archive = true; let lastModified = Date.now(); response.doc.lastModified = lastModified const archiveResult = await this.classViewService.saveResponse(response.doc) console.log(\"archiveResult: \" + archiveResult) } let result = await this.dashboardService.archiveStudentRegistration(studentId) console.log(\"result: \" + result) } catch (e) { console.log(\"Error deleting student: \" + e) return false; } } }","title":"Deletions in Tangerine"},{"location":"developer/class-deletions/#deletions-in-tangerine","text":"We're archiving records instead of deleting them in Tangerine by setting archive:true on the root of the doc and filtering queries by && !archive . For most queries, you simply must simply append && !archive to the query in order to ensure your views filter for the archive flag. Sample view that filters by archive: responsesByClassIdCurriculumId: { map: function (doc) { if (doc.hasOwnProperty('collection') && doc.collection === 'TangyFormResponse' && !doc.archive) { if (doc.hasOwnProperty('metadata') && doc.metadata.studentRegistrationDoc.classId) { // console.log(\"matching: \" + doc.metadata.studentRegistrationDoc.classId) emit([doc.metadata.studentRegistrationDoc.classId, doc.form.id], true); } } }.toString() }, Sample function to archive some records: async archiveStudent(column) { let studentId = column.id console.log(\"Archiving student:\" + studentId) let deleteConfirmed = confirm(_TRANSLATE(\"Delete this student?\")); if (deleteConfirmed) { try { let responses = await this.classViewService.getResponsesByStudentId(studentId) for (const response of responses as any[] ) { response.doc.archive = true; let lastModified = Date.now(); response.doc.lastModified = lastModified const archiveResult = await this.classViewService.saveResponse(response.doc) console.log(\"archiveResult: \" + archiveResult) } let result = await this.dashboardService.archiveStudentRegistration(studentId) console.log(\"result: \" + result) } catch (e) { console.log(\"Error deleting student: \" + e) return false; } } }","title":"Deletions in Tangerine"},{"location":"developer/class-docs/","text":"Getting Started \u00b6 How to get data out of a TangyFormResponse \u00b6 const studentRegistrationDoc = await dashboardService.getResponse(this.studentId); const srInputs = this.getInputValues(studentRegistrationDoc); getInputValues(doc) { let inputs = doc.items.reduce((acc, item) => [...acc, ...item.inputs], []) let obj = {} for (const el of inputs) { var attrs = inputs.attributes; for(let i = inputs.length - 1; i >= 0; i--) { obj[inputs[i].name] = inputs[i].value; } } console.log(\"obj: \" + JSON.stringify(obj)) return obj; }","title":"Getting Started"},{"location":"developer/class-docs/#getting-started","text":"","title":"Getting Started"},{"location":"developer/class-docs/#how-to-get-data-out-of-a-tangyformresponse","text":"const studentRegistrationDoc = await dashboardService.getResponse(this.studentId); const srInputs = this.getInputValues(studentRegistrationDoc); getInputValues(doc) { let inputs = doc.items.reduce((acc, item) => [...acc, ...item.inputs], []) let obj = {} for (const el of inputs) { var attrs = inputs.attributes; for(let i = inputs.length - 1; i >= 0; i--) { obj[inputs[i].name] = inputs[i].value; } } console.log(\"obj: \" + JSON.stringify(obj)) return obj; }","title":"How to get data out of a TangyFormResponse"},{"location":"developer/cordova-plugin-development/","text":"Cordova plugin development \u00b6 Getting started \u00b6 It is a lot easier to build a cordova plugin for Tangerine using a generic Cordova project instead of developing directly in Tangerine, because in Tangerine access to the actual client Cordova code is hidden away in /tangerine/client/builds/apk. So first use the cordova cli to generate a new project. Refreshing your new plugin in your Cordova project \u00b6 After making modifications to the plugin, rm and add the plugin and the cordova android platform before building. cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / Tangerine - Community / cordova - plugin - nearby - connections cordova build android Updating the cordova plugin inside Tangerine \u00b6 After your done the bulk of your Cordova development, you will need to modify the docker-tangerine-base-image to include the new plugin. After updating the base image, don't forget to update the Dockerfile. Sometimes you may need to view an update to the plugin but you don't want to go to the trouble of updating the base image. It is possible to work on the plugin code and then refresh the code in Tangerine. First you will need to share the source code with your docker instance Add the following to develop.sh: --volume $(pwd)/../cordova-plugin-nearby-connections:/tangerine/client/cordova-plugin-nearby-connections \\ Once your container has started, docker exec into it, and run the following: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save Sometimes cordova can have issues with cleaning the build; here's a way to make sure you have the updated code: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save cordova build android Updating Angular client code used in the APK \u00b6 IF you're developing Cordova plugins for Tangerine and make changes to the Angular client code that is displayed in the apk, you will need to refresh the apk build. First generate a pwa. Then run the following code: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app Then generate the apk. To check if it worked, you can search for the new code in these files: vi builds / apk / www / shell / main . js vi builds / pwa / release - uuid / app / main . js T0 uninstall and re-install the apk: adb uninstall org . rti . tangerine adb install qa / apks / group - long - uuisd / platforms / android / app / build / outputs / apk / debug / app - debug . apk","title":"Cordova plugin development"},{"location":"developer/cordova-plugin-development/#cordova-plugin-development","text":"","title":"Cordova plugin development"},{"location":"developer/cordova-plugin-development/#getting-started","text":"It is a lot easier to build a cordova plugin for Tangerine using a generic Cordova project instead of developing directly in Tangerine, because in Tangerine access to the actual client Cordova code is hidden away in /tangerine/client/builds/apk. So first use the cordova cli to generate a new project.","title":"Getting started"},{"location":"developer/cordova-plugin-development/#refreshing-your-new-plugin-in-your-cordova-project","text":"After making modifications to the plugin, rm and add the plugin and the cordova android platform before building. cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / Tangerine - Community / cordova - plugin - nearby - connections cordova build android","title":"Refreshing your new plugin in your Cordova project"},{"location":"developer/cordova-plugin-development/#updating-the-cordova-plugin-inside-tangerine","text":"After your done the bulk of your Cordova development, you will need to modify the docker-tangerine-base-image to include the new plugin. After updating the base image, don't forget to update the Dockerfile. Sometimes you may need to view an update to the plugin but you don't want to go to the trouble of updating the base image. It is possible to work on the plugin code and then refresh the code in Tangerine. First you will need to share the source code with your docker instance Add the following to develop.sh: --volume $(pwd)/../cordova-plugin-nearby-connections:/tangerine/client/cordova-plugin-nearby-connections \\ Once your container has started, docker exec into it, and run the following: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save Sometimes cordova can have issues with cleaning the build; here's a way to make sure you have the updated code: cd / tangerine / client / builds / apk cordova plugin rm cordova - plugin - nearby - connections cordova platform rm android cordova platform add android @ 8 cordova plugin add .. / .. / cordova - plugin - nearby - connections -- save cordova build android","title":"Updating the cordova plugin inside Tangerine"},{"location":"developer/cordova-plugin-development/#updating-angular-client-code-used-in-the-apk","text":"IF you're developing Cordova plugins for Tangerine and make changes to the Angular client code that is displayed in the apk, you will need to refresh the apk build. First generate a pwa. Then run the following code: cd / tangerine / client && \\ rm - rf builds / apk / www / shell && \\ rm - rf builds / pwa / release - uuid / app && \\ cp - r dev builds / apk / www / shell && \\ cp - r pwa - tools / updater - app / build / default builds / pwa && \\ cp - r dev builds / pwa / release - uuid / app Then generate the apk. To check if it worked, you can search for the new code in these files: vi builds / apk / www / shell / main . js vi builds / pwa / release - uuid / app / main . js T0 uninstall and re-install the apk: adb uninstall org . rti . tangerine adb install qa / apks / group - long - uuisd / platforms / android / app / build / outputs / apk / debug / app - debug . apk","title":"Updating Angular client code used in the APK"},{"location":"developer/debugging-reporting/","text":"Debugging the Reporting Cache process \u00b6 Configure your project to use the CSV and Logstash modules: T_MODULES=\"['csv', 'logstash']\" Start the development environment... ./develop.sh Create a group called foo in the GUI. Then open ./server/src/app.service.ts and comment out the call to this.keepAliveReportingWorker() . \"exec\" into the container and note how foo has been added to the /reporting-worker-state.json file. docker exec -it tangerine bash cat /reporting-worker-state.json Seed the foo group with 100 form responses. docker exec tangerine generate-uploads 100 foo In Chrome, go to chrome://inspect , click Configure... , and add 127.0.0.1:9228 as an entry in \"Target discovery settings\". //@TODO OUTDATED but still relevant Now manually trigger a batch. After the command finishes, verify the batch by checking http://localhost:5984/_utils/#database/foo-reporting/_all_docs . node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) There will be only 15 docs in your reporting db because that is the batch size. Although Tangerine in develop.sh mode runs node in a debugger process, you must launch a separate node process to debug the batch reporting worker. If no errors occurred, copy the temporary state to the current state. cp /reporting-worker-state.json_tmp /reporting-worker-state.json Keep repeating to continue processing... cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /reporting-worker-state.json_tmp cp /reporting-worker-state.json_tmp /reporting-worker-state.json If you would like to debug, add the --inspect-brk=0.0.0.0:9227 option to the run-worker.js command. cat /reporting-worker-state.json | node --inspect-brk=0.0.0.0:9227 /tangerine/server/src/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp When you run that command, it will wait on the first line of the script for a debugger to connect to it. In Chrome, go to chrome://inspect , click Configure... , and add 127.0.0.1:9227 as an entry in \"Target discovery settings\". Now back to the chrome://inspect page and you will find under the Remote Target #127.0.0.1 group, a new target has been discovered called /tangerine/server/reporting/run-worker.js . Click inspect and now you should be able to set breakpoints and walk through the code. You may not be able to set breakpoints in all files so use \"step into\" and the debugger keyword to get the debugger to the focus you want. If you want to keep the cache worker running, use watch. watch -n 1 \"cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /.reporting-worker-state.json | json_pp && cp /.reporting-worker-state.json /reporting-worker-state.json\" If you need to clear a reporting cache, don't simply delete the reporting db. Use reporting-cache-clear You typically need to remove the semaphore before running reporting-cache-clear, especially if there was a crash rm /reporting-worker-running A typical report debugging workflow: \u00b6 Remember to setup config.sh properly! (Make sure T_MODULES=\"['csv','logstash']\") Comment out keepAliveReportingWorker in /server/src/app.service.ts. Remember to add 127.0.0.1:9228 as an entry in \"Target discovery settings\" in chrome://inspect/#devices You may need to add debugger before the line of code you wish to debug. docker exec into your container docker exec -it tangerine bash Then you'll typically need to rm the reporting-worker-running - it keeps reporting-cache-clear from running if a previous debug session crashed. rm /reporting-worker-running reporting-cache-clear node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) Switch back to Chrome, open chrome://inspect . The debugger will be the session that looks like this: Target /usr/local/bin/reporting-worker-batch file:///tangerine/server/src/scripts/reporting-worker-batch.js Inspect When it launches, it will wait on the first line of the script for a debugger to connect to it. Click F8 to run. If all is right and good in this world, it will stop at your debugger statement. When the batch has completed, your debugger window will close.","title":"Debugging reporting"},{"location":"developer/debugging-reporting/#debugging-the-reporting-cache-process","text":"Configure your project to use the CSV and Logstash modules: T_MODULES=\"['csv', 'logstash']\" Start the development environment... ./develop.sh Create a group called foo in the GUI. Then open ./server/src/app.service.ts and comment out the call to this.keepAliveReportingWorker() . \"exec\" into the container and note how foo has been added to the /reporting-worker-state.json file. docker exec -it tangerine bash cat /reporting-worker-state.json Seed the foo group with 100 form responses. docker exec tangerine generate-uploads 100 foo In Chrome, go to chrome://inspect , click Configure... , and add 127.0.0.1:9228 as an entry in \"Target discovery settings\". //@TODO OUTDATED but still relevant Now manually trigger a batch. After the command finishes, verify the batch by checking http://localhost:5984/_utils/#database/foo-reporting/_all_docs . node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) There will be only 15 docs in your reporting db because that is the batch size. Although Tangerine in develop.sh mode runs node in a debugger process, you must launch a separate node process to debug the batch reporting worker. If no errors occurred, copy the temporary state to the current state. cp /reporting-worker-state.json_tmp /reporting-worker-state.json Keep repeating to continue processing... cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /reporting-worker-state.json_tmp cp /reporting-worker-state.json_tmp /reporting-worker-state.json If you would like to debug, add the --inspect-brk=0.0.0.0:9227 option to the run-worker.js command. cat /reporting-worker-state.json | node --inspect-brk=0.0.0.0:9227 /tangerine/server/src/scripts/reporting-worker-batch.js | tee /reporting-worker-state.json_tmp When you run that command, it will wait on the first line of the script for a debugger to connect to it. In Chrome, go to chrome://inspect , click Configure... , and add 127.0.0.1:9227 as an entry in \"Target discovery settings\". Now back to the chrome://inspect page and you will find under the Remote Target #127.0.0.1 group, a new target has been discovered called /tangerine/server/reporting/run-worker.js . Click inspect and now you should be able to set breakpoints and walk through the code. You may not be able to set breakpoints in all files so use \"step into\" and the debugger keyword to get the debugger to the focus you want. If you want to keep the cache worker running, use watch. watch -n 1 \"cat /reporting-worker-state.json | node /tangerine/server/reporting/run-worker.js | tee /.reporting-worker-state.json | json_pp && cp /.reporting-worker-state.json /reporting-worker-state.json\" If you need to clear a reporting cache, don't simply delete the reporting db. Use reporting-cache-clear You typically need to remove the semaphore before running reporting-cache-clear, especially if there was a crash rm /reporting-worker-running","title":"Debugging the Reporting Cache process"},{"location":"developer/debugging-reporting/#a-typical-report-debugging-workflow","text":"Remember to setup config.sh properly! (Make sure T_MODULES=\"['csv','logstash']\") Comment out keepAliveReportingWorker in /server/src/app.service.ts. Remember to add 127.0.0.1:9228 as an entry in \"Target discovery settings\" in chrome://inspect/#devices You may need to add debugger before the line of code you wish to debug. docker exec into your container docker exec -it tangerine bash Then you'll typically need to rm the reporting-worker-running - it keeps reporting-cache-clear from running if a previous debug session crashed. rm /reporting-worker-running reporting-cache-clear node --inspect-brk=0.0.0.0:9228 $(which reporting-worker-batch) Switch back to Chrome, open chrome://inspect . The debugger will be the session that looks like this: Target /usr/local/bin/reporting-worker-batch file:///tangerine/server/src/scripts/reporting-worker-batch.js Inspect When it launches, it will wait on the first line of the script for a debugger to connect to it. Click F8 to run. If all is right and good in this world, it will stop at your debugger statement. When the batch has completed, your debugger window will close.","title":"A typical report debugging workflow:"},{"location":"developer/debugging_node_apps/","text":"In develop.sh, the port 9229 should be opend. docker run \\ -d \\ --name tangerine-container \\ -p 80:80 -p 5984:5984 -p 9229:9229 \\ --env \"DEBUG=1\" \\ --env \"NODE_ENV=development\" \\ etc... Add the folloiwng to your node process: --inspect=[::]:9229 index.js for example, reporting/shart.sh: nodemon --inspect=[::]:9229 index.js using the leh* db for testing workflow csv generation http://localhost/app/group-leh_wi_lan_pilot_2018/index.html#assessments","title":"Debugging node apps"},{"location":"developer/docker-network-issues/","text":"Docker Network Issues \u00b6 Overview \u00b6 If you develop behind a corporate firewall, you may run into issues when building Tangerine from the Dockerfile relating to network access to file resources. Why would this happen? - Your corporate network may use the same ports as the virtual private network that docker creates. - Your local DNS may may configured to use an internal corporate DNS which causes resolution problems when offline. If you experience these problems, add the following switches to your docker config file: \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] , \"dns\" : [ \"75.75.75.75\" , \"8.8.8.8\" ] Background \u00b6 Networking \u00b6 Error: bower polymer#^2.0.0 ECMDERR Failed to execute \"git ls-remote --tags --heads https://github.com/Polymer/polymer.git\", exit code of #128 fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Additional error details: fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Quoting correspondence with a colleague: \"Docker creates bridge networks on the set of ranges 172.[17-31].0.0/16 (and some others) by default. If a server had a Docker network on 172.19.0.0/16, it could receive traffic from the VPN, but it would send its response to the bridge network, where it wouldn\u2019t go anywhere.\" Fortunately, we can change the default address pools for Docker networks by changing the configuration for the Docker daemon: https://github.com/moby/moby/pull/36396 I\u2019m setting ours to the default address example in that pull request:\" \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] DNS \u00b6 Error: request to https://registry.npmjs.org/@vaadin/vaadin-usage-statistics/-/vaadin-usage-statistics-2.1.0.tgz failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org registry.npmjs.org:443 I think this is where I found this solution: https://github.com/npm/npm/issues/16661 So, I needed to configure the docker DNS config. The first item is my local ISP (Comcast_ DNS server, the second is Google\u2019s.) \"dns\": [ \"75.75.75.75\", \"8.8.8.8\" ] Change them to your needs. Anyway, the good news is that with both the default-address-pools and dns properties in my docker config, my build works both connected and disconnected to the RTI VPN.","title":"Docker Network Issues"},{"location":"developer/docker-network-issues/#docker-network-issues","text":"","title":"Docker Network Issues"},{"location":"developer/docker-network-issues/#overview","text":"If you develop behind a corporate firewall, you may run into issues when building Tangerine from the Dockerfile relating to network access to file resources. Why would this happen? - Your corporate network may use the same ports as the virtual private network that docker creates. - Your local DNS may may configured to use an internal corporate DNS which causes resolution problems when offline. If you experience these problems, add the following switches to your docker config file: \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ] , \"dns\" : [ \"75.75.75.75\" , \"8.8.8.8\" ]","title":"Overview"},{"location":"developer/docker-network-issues/#background","text":"","title":"Background"},{"location":"developer/docker-network-issues/#networking","text":"Error: bower polymer#^2.0.0 ECMDERR Failed to execute \"git ls-remote --tags --heads https://github.com/Polymer/polymer.git\", exit code of #128 fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Additional error details: fatal: unable to access 'https://github.com/Polymer/polymer.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated. Quoting correspondence with a colleague: \"Docker creates bridge networks on the set of ranges 172.[17-31].0.0/16 (and some others) by default. If a server had a Docker network on 172.19.0.0/16, it could receive traffic from the VPN, but it would send its response to the bridge network, where it wouldn\u2019t go anywhere.\" Fortunately, we can change the default address pools for Docker networks by changing the configuration for the Docker daemon: https://github.com/moby/moby/pull/36396 I\u2019m setting ours to the default address example in that pull request:\" \"default-address-pools\" : [ { \"base\" : \"172.80.0.0/16\" , \"size\" : 24 }, { \"base\" : \"172.90.0.0/16\" , \"size\" : 24 } ]","title":"Networking"},{"location":"developer/docker-network-issues/#dns","text":"Error: request to https://registry.npmjs.org/@vaadin/vaadin-usage-statistics/-/vaadin-usage-statistics-2.1.0.tgz failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org registry.npmjs.org:443 I think this is where I found this solution: https://github.com/npm/npm/issues/16661 So, I needed to configure the docker DNS config. The first item is my local ISP (Comcast_ DNS server, the second is Google\u2019s.) \"dns\": [ \"75.75.75.75\", \"8.8.8.8\" ] Change them to your needs. Anyway, the good news is that with both the default-address-pools and dns properties in my docker config, my build works both connected and disconnected to the RTI VPN.","title":"DNS"},{"location":"developer/i18n-translation/","text":"i18n/Translation \u00b6 In Tangerine there are two kinds of translations, content translations and application translations. Content translations are embedded in form content by Editor Users using <t-lang> tags, while application translations are embedded in application level code using the t function in Web Components, _TRANSLATE function in an Angular TS file, or translate pipe in Angular component templates. Content Translations \u00b6 Translations for specific languages are embedded in content, thus portable and specific to that content. The <t-lang> component ( https://github.com/ICTatRTI/translation-web-component ) is used to detect the language assigned to the HTML doc. In the following example, the label on the hello input will be \"Hello\" if English is set as the language, \"Bonjour\" if French is selected as the language. <tangy-input name=\"hello\" label=\" <t-lang en>Hello</t-lang> <t-lang fr>Bonjour</t-lang> \" > </tangy-input> Application Translations \u00b6 In application code, instead of placing inline translations, a centrally managed JSON file is sourced for replacing strings. At ./client/default-assets/translation.fr.json you will find the JSON file use for translations when the French language is selected. { \"Accuracy\": \"Pr\u00e9cision\", \"Accuracy Level\": \"Niveau de pr\u00e9cision\", \"Add New User\": \"Ajouter un nouvel utilisateur\", \"Add User to Group\": \"Ajouter un utilisateur \u00e0 un groupe\", ... } You'll also find the Russian translation at ./client/default-assets/translation.ru.json . { \"Accuracy\": \"\u0410\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u044c\", \"Accuracy Level\": \"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438\", \"Add New User\": \"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", \"Add User to Group\": \"Add User to Group\", ... } And many more. Each file defines an object where the keys are what to replace in the application and the values are what to replace strings with for that language. Depending on where in the application the string is, there are different techniques for exposing a string to translation. In Web Components libraries such as <tangy-form> and <tangy-form-editor> , they use a special t function. Translating strings in template literals looks like... this.shadowRoot.innerHTML = ` <h1> ${t('Hello')} </h1> ... ` Often times Polymer templates are used which won't let you embed functions. In that case, in connectedCallback a this.t object is assembled and then used in the Polymer template. connectedCallback() { super.connectedCallback() this.t = { hello: t(\"Hello\") } } template() { return html` [[t.hello]] ` } In Angular Components, the translate pipe is available in templates and _TRANSLATE function for translating in TS files outside of templates. <h1> {{'Hello'|translate}} </h1> const helloString = _TRANSLATE('Hello') Other notes \u00b6 Mat-pagination needs a special service to enable use of translation.json - see class/_services/mat-pagination-intl.service.ts Right to left languages (RTL) \u00b6 Mat-menu does not support RTL out of the box, but it's simple to get it working: add dir=\"rtl\" to its enclosing element. <span dir=\"rtl\">&nbsp;&nbsp;&nbsp; <button mat-button [matMenuTriggerFor]=\"reportsMenu\" class=\"mat-button\">{{'Select Report'|translate}}</button> <mat-menu #reportsMenu=\"matMenu\"> <button mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">Class grouping</button> </mat-menu> <mat-menu #groupingMenu=\"matMenu\"> <button mat-menu-item *ngFor=\"let item of formList\" routerLink=\"/reports/{{item.id}}/{{item.classId}}\">{{item.title}}</button> </mat-menu> </span> mat-table also needs some twekas to work - Css: .mat-column-Name { padding-right:5px; } th.mat-header-cell { text-align: right; }","title":"i18n/Translation"},{"location":"developer/i18n-translation/#i18ntranslation","text":"In Tangerine there are two kinds of translations, content translations and application translations. Content translations are embedded in form content by Editor Users using <t-lang> tags, while application translations are embedded in application level code using the t function in Web Components, _TRANSLATE function in an Angular TS file, or translate pipe in Angular component templates.","title":"i18n/Translation"},{"location":"developer/i18n-translation/#content-translations","text":"Translations for specific languages are embedded in content, thus portable and specific to that content. The <t-lang> component ( https://github.com/ICTatRTI/translation-web-component ) is used to detect the language assigned to the HTML doc. In the following example, the label on the hello input will be \"Hello\" if English is set as the language, \"Bonjour\" if French is selected as the language. <tangy-input name=\"hello\" label=\" <t-lang en>Hello</t-lang> <t-lang fr>Bonjour</t-lang> \" > </tangy-input>","title":"Content Translations"},{"location":"developer/i18n-translation/#application-translations","text":"In application code, instead of placing inline translations, a centrally managed JSON file is sourced for replacing strings. At ./client/default-assets/translation.fr.json you will find the JSON file use for translations when the French language is selected. { \"Accuracy\": \"Pr\u00e9cision\", \"Accuracy Level\": \"Niveau de pr\u00e9cision\", \"Add New User\": \"Ajouter un nouvel utilisateur\", \"Add User to Group\": \"Ajouter un utilisateur \u00e0 un groupe\", ... } You'll also find the Russian translation at ./client/default-assets/translation.ru.json . { \"Accuracy\": \"\u0410\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u044c\", \"Accuracy Level\": \"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438\", \"Add New User\": \"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", \"Add User to Group\": \"Add User to Group\", ... } And many more. Each file defines an object where the keys are what to replace in the application and the values are what to replace strings with for that language. Depending on where in the application the string is, there are different techniques for exposing a string to translation. In Web Components libraries such as <tangy-form> and <tangy-form-editor> , they use a special t function. Translating strings in template literals looks like... this.shadowRoot.innerHTML = ` <h1> ${t('Hello')} </h1> ... ` Often times Polymer templates are used which won't let you embed functions. In that case, in connectedCallback a this.t object is assembled and then used in the Polymer template. connectedCallback() { super.connectedCallback() this.t = { hello: t(\"Hello\") } } template() { return html` [[t.hello]] ` } In Angular Components, the translate pipe is available in templates and _TRANSLATE function for translating in TS files outside of templates. <h1> {{'Hello'|translate}} </h1> const helloString = _TRANSLATE('Hello')","title":"Application Translations"},{"location":"developer/i18n-translation/#other-notes","text":"Mat-pagination needs a special service to enable use of translation.json - see class/_services/mat-pagination-intl.service.ts","title":"Other notes"},{"location":"developer/i18n-translation/#right-to-left-languages-rtl","text":"Mat-menu does not support RTL out of the box, but it's simple to get it working: add dir=\"rtl\" to its enclosing element. <span dir=\"rtl\">&nbsp;&nbsp;&nbsp; <button mat-button [matMenuTriggerFor]=\"reportsMenu\" class=\"mat-button\">{{'Select Report'|translate}}</button> <mat-menu #reportsMenu=\"matMenu\"> <button mat-menu-item [matMenuTriggerFor]=\"groupingMenu\">Class grouping</button> </mat-menu> <mat-menu #groupingMenu=\"matMenu\"> <button mat-menu-item *ngFor=\"let item of formList\" routerLink=\"/reports/{{item.id}}/{{item.classId}}\">{{item.title}}</button> </mat-menu> </span> mat-table also needs some twekas to work - Css: .mat-column-Name { padding-right:5px; } th.mat-header-cell { text-align: right; }","title":"Right to left languages (RTL)"},{"location":"developer/load-testing/","text":"Load testing \u00b6 Populate database \u00b6 One may populate a Tangerine instance with records using the cli: docker exec tangerine generate-uploads 500 group-uuid 2000 100 case-mother That command generates 500 'case-mother' cases (each of which has 2 records) in batches of 100, posted every 2000 ms. The 'case-mother' switch uses templates stored in the 'response-templates' directory of that group in the data dir. (Read server/src/scripts/generate-uploads/bin.js for more details.) Push changed code \u00b6 If you make modifications to your Angular code, run the following command while exec'd into the container: cd /tangerine/client && rm -rf builds/apk/www/shell && rm -rf builds/pwa/release-uuid/app && cp -r dev builds/apk/www/shell && cp -r pwa-tools/updater-app/build/default builds/pwa && cp -r dev builds/pwa/release-uuid/app Build an APK \u00b6 In editor, build an APK. Update and test \u00b6 On the tablet, in the menu select \"Check for Update\" to update the code and then select \"Sync Online\" to download the records. Clean things up \u00b6 To delete all generated records (but keep the views), use bulkdelete .","title":"Load testing"},{"location":"developer/load-testing/#load-testing","text":"","title":"Load testing"},{"location":"developer/load-testing/#populate-database","text":"One may populate a Tangerine instance with records using the cli: docker exec tangerine generate-uploads 500 group-uuid 2000 100 case-mother That command generates 500 'case-mother' cases (each of which has 2 records) in batches of 100, posted every 2000 ms. The 'case-mother' switch uses templates stored in the 'response-templates' directory of that group in the data dir. (Read server/src/scripts/generate-uploads/bin.js for more details.)","title":"Populate database"},{"location":"developer/load-testing/#push-changed-code","text":"If you make modifications to your Angular code, run the following command while exec'd into the container: cd /tangerine/client && rm -rf builds/apk/www/shell && rm -rf builds/pwa/release-uuid/app && cp -r dev builds/apk/www/shell && cp -r pwa-tools/updater-app/build/default builds/pwa && cp -r dev builds/pwa/release-uuid/app","title":"Push changed code"},{"location":"developer/load-testing/#build-an-apk","text":"In editor, build an APK.","title":"Build an APK"},{"location":"developer/load-testing/#update-and-test","text":"On the tablet, in the menu select \"Check for Update\" to update the code and then select \"Sync Online\" to download the records.","title":"Update and test"},{"location":"developer/load-testing/#clean-things-up","text":"To delete all generated records (but keep the views), use bulkdelete .","title":"Clean things up"},{"location":"developer/modules/","text":"Tangy Modules \u00b6 Modules provide additional features to Tangerine, such as: - automatically add forms to the client when a new group is created (via groupNew hook) - data transformation for reporting (via flatFormReponse hook) Modules: - Class Steps to add a module - Create an index.js file inside server/src/modules/moduleName using the sample below as a guide. - Implement any relevant hooks. See the examples for flatFormReponse and groupNew, below. - Forms that need to be copied over to the client should be placed in server/src/modules/moduleName. Sample module index.js \u00b6 ``` const clog = require('tangy-log').clog const fs = require('fs-extra') module.exports = { hooks: { flatFormReponse: function(data) { return new Promise((resolve, reject) => { debugger; let formResponse = data.formResponse let flatFormResponse = data.flatFormResponse if (formResponse.metadata && formResponse.metadata.studentRegistrationDoc && formResponse.metadata.studentRegistrationDoc.classId) { let studentRegistrationDoc = formResponse.metadata.studentRegistrationDoc flatFormResponse[ sr_classId ] = studentRegistrationDoc.classId; flatFormResponse[ sr_student_name ] = studentRegistrationDoc.student_name; flatFormResponse[ sr_student_id ] = studentRegistrationDoc.id; flatFormResponse[ sr_age ] = studentRegistrationDoc.age; flatFormResponse[ sr_gender ] = studentRegistrationDoc.gender; } resolve({flatFormResponse, formResponse}) }) }, groupNew: function(data) { return new Promise(async (resolve, reject) => { const {groupName, appConfig} = data clog(\"Setting homeUrl to dashboard and uploadUnlockedFormReponses to true.\") appConfig.homeUrl = \"dashboard\" appConfig.uploadUnlockedFormReponses = true // copy the class forms try { await fs.copy('/tangerine/server/src/modules/class/', /tangerine/client/content/groups/${groupName} ) clog(\"Copied class module forms.\") } catch (err) { console.error(err) } resolve(data) }) }, } } ``` This code will be automatically run when the TangyModules (server/src/modules/index.js) is run","title":"Tangy Modules"},{"location":"developer/modules/#tangy-modules","text":"Modules provide additional features to Tangerine, such as: - automatically add forms to the client when a new group is created (via groupNew hook) - data transformation for reporting (via flatFormReponse hook) Modules: - Class Steps to add a module - Create an index.js file inside server/src/modules/moduleName using the sample below as a guide. - Implement any relevant hooks. See the examples for flatFormReponse and groupNew, below. - Forms that need to be copied over to the client should be placed in server/src/modules/moduleName.","title":"Tangy Modules"},{"location":"developer/modules/#sample-module-indexjs","text":"``` const clog = require('tangy-log').clog const fs = require('fs-extra') module.exports = { hooks: { flatFormReponse: function(data) { return new Promise((resolve, reject) => { debugger; let formResponse = data.formResponse let flatFormResponse = data.flatFormResponse if (formResponse.metadata && formResponse.metadata.studentRegistrationDoc && formResponse.metadata.studentRegistrationDoc.classId) { let studentRegistrationDoc = formResponse.metadata.studentRegistrationDoc flatFormResponse[ sr_classId ] = studentRegistrationDoc.classId; flatFormResponse[ sr_student_name ] = studentRegistrationDoc.student_name; flatFormResponse[ sr_student_id ] = studentRegistrationDoc.id; flatFormResponse[ sr_age ] = studentRegistrationDoc.age; flatFormResponse[ sr_gender ] = studentRegistrationDoc.gender; } resolve({flatFormResponse, formResponse}) }) }, groupNew: function(data) { return new Promise(async (resolve, reject) => { const {groupName, appConfig} = data clog(\"Setting homeUrl to dashboard and uploadUnlockedFormReponses to true.\") appConfig.homeUrl = \"dashboard\" appConfig.uploadUnlockedFormReponses = true // copy the class forms try { await fs.copy('/tangerine/server/src/modules/class/', /tangerine/client/content/groups/${groupName} ) clog(\"Copied class module forms.\") } catch (err) { console.error(err) } resolve(data) }) }, } } ``` This code will be automatically run when the TangyModules (server/src/modules/index.js) is run","title":"Sample module index.js"},{"location":"developer/supporting-custom-elements/","text":"Supporting custom elements \u00b6 To add a new custom element or to add support for new polymer or other web components, you must make them accessible to Angular: - add to package.json - import into polyfills You also need to add CUSTOM_ELEMENTS_SCHEMA to your module to support custom tags in your templates: schemas : [ CUSTOM_ELEMENTS_SCHEMA ],","title":"Supporting custom elements"},{"location":"developer/supporting-custom-elements/#supporting-custom-elements","text":"To add a new custom element or to add support for new polymer or other web components, you must make them accessible to Angular: - add to package.json - import into polyfills You also need to add CUSTOM_ELEMENTS_SCHEMA to your module to support custom tags in your templates: schemas : [ CUSTOM_ELEMENTS_SCHEMA ],","title":"Supporting custom elements"},{"location":"developer/tangerine-globals/","text":"Globals in Tangerine \u00b6 Globals in memory \u00b6 In-memory globals won't survive refreshing the browser. We are caching important configuration files (app-config.json, forms.json, location-list.json) to avoid having to keep fetching those docs from the db. Use the following code to take advantage of this caching: - await this.appConfigService.getLocationList(); - await this.tangyFormsInfoService.getFormsInfo(); - await this.appConfigService.getAppConfig; - await this.tangyFormService.getFormMarkup(this.eventFormDefinition.formId); CaseDefinitionsService also has implements of caseDefinitions, but that is not exposed publicly. More info in this PR: https://github.com/Tangerine-Community/Tangerine/pull/1991 Globals that are stored in a database \u00b6 Database variables will persist after page refreshes or app reboots. Use VariableService. Stores data in 'tangerine-variables' pouchdb as a key/value pair. The key is the _id in the doc. The value can be a string, JSON object, or any other data type that can be persisted in a pouchdb. await this . variableService . set ( 'tangerine-device-is-registered' , true ) await this . variableService . get ( 'tangerine-device-is-registered' ) Widely-used Configuration Variables \u00b6 Server \u00b6 They are not globals, but they are mighty useful. The TangerineConfigService provides variables set in config.sh. Expose it in your constructor: private readonly configService : TangerineConfigService , And then you may use it: const userOneUsername = this . configService . config (). userOneUsername Client \u00b6 Use await this.appConfigService.getAppConfig; to fetch app-config.json settings in client.","title":"Globals in Tangerine"},{"location":"developer/tangerine-globals/#globals-in-tangerine","text":"","title":"Globals in Tangerine"},{"location":"developer/tangerine-globals/#globals-in-memory","text":"In-memory globals won't survive refreshing the browser. We are caching important configuration files (app-config.json, forms.json, location-list.json) to avoid having to keep fetching those docs from the db. Use the following code to take advantage of this caching: - await this.appConfigService.getLocationList(); - await this.tangyFormsInfoService.getFormsInfo(); - await this.appConfigService.getAppConfig; - await this.tangyFormService.getFormMarkup(this.eventFormDefinition.formId); CaseDefinitionsService also has implements of caseDefinitions, but that is not exposed publicly. More info in this PR: https://github.com/Tangerine-Community/Tangerine/pull/1991","title":"Globals in memory"},{"location":"developer/tangerine-globals/#globals-that-are-stored-in-a-database","text":"Database variables will persist after page refreshes or app reboots. Use VariableService. Stores data in 'tangerine-variables' pouchdb as a key/value pair. The key is the _id in the doc. The value can be a string, JSON object, or any other data type that can be persisted in a pouchdb. await this . variableService . set ( 'tangerine-device-is-registered' , true ) await this . variableService . get ( 'tangerine-device-is-registered' )","title":"Globals that are stored in a database"},{"location":"developer/tangerine-globals/#widely-used-configuration-variables","text":"","title":"Widely-used Configuration Variables"},{"location":"developer/tangerine-globals/#server","text":"They are not globals, but they are mighty useful. The TangerineConfigService provides variables set in config.sh. Expose it in your constructor: private readonly configService : TangerineConfigService , And then you may use it: const userOneUsername = this . configService . config (). userOneUsername","title":"Server"},{"location":"developer/tangerine-globals/#client","text":"Use await this.appConfigService.getAppConfig; to fetch app-config.json settings in client.","title":"Client"},{"location":"developer/viewing-forms-and-data/","text":"Viewing Forms and Form Data \u00b6 Use TangyFormService to retrieve form definitions and response data: this . formResponse = await this . tangyFormService . getResponse ( this . eventForm . formResponseId ) const tangyFormMarkup = await this . tangyFormService . getFormMarkup ( this . eventFormDefinition . formId ) But there are other ways of getting data out of Tangerine. First you need to see where you are getting data from. Mapping of components to forms \u00b6 EventFormListItemComponent - listing of forms in an event CaseEventListItemComponent - listing of events (such as Followup ANC Visits) in a case. Helper functions already in components \u00b6 In the component for a list, helper functions may already expose the properties you need to populate a template. In EventFormListItemComponent, notice the variable exposed: const response = await this . formService . getResponse ( this . eventForm . formResponseId ) const getValue = ( variableName ) => { // more code inside getValue(); }, {}) // snip const caseInstance = this . case const caseDefinition = this . caseDefinition const caseEventDefinition = this . caseEventDefinition const caseEvent = this . caseEvent const eventForm = this . eventForm const eventFormDefinition = this . eventFormDefinition const formatDate = ( unixTimeInMilliseconds , format ) => moment ( new Date ( unixTimeInMilliseconds )). format ( format ) const TRANSLATE = _TRANSLATE eval ( `this.renderedTemplateListItemIcon = this.caseDefinition.templateEventFormListItemIcon ? \\` ${ this . caseDefinition . templateEventFormListItemIcon } \\` : \\` ${ this . defaultTemplateListItemIcon } \\`` ) eval ( `this.renderedTemplateListItemPrimary = this.caseDefinition.templateEventFormListItemPrimary ? \\` ${ this . caseDefinition . templateEventFormListItemPrimary } \\` : \\` ${ this . defaultTemplateListItemPrimary } \\`` ) eval ( `this.renderedTemplateListItemSecondary = this.caseDefinition.templateEventFormListItemSecondary ? \\` ${ this . caseDefinition . v } \\` : \\` ${ this . defaultTemplateListItemSecondary } \\`` ) If there is not a response for a form, response will be false; therefore, if you do a getValue() in your template, be sure to test if response is true. If you wish to display the startDatetime in your template, note that is is part of the response object - it is returned as response.startDatetime. In other cases - for values inside the form - use getValue(variableName) - but test if response is true first! Also, remember that the variableName is one of the id's in the inputs array, which is inside each item in the items array. Testing your templates \u00b6 Here's an easy way to test your template code: in the js console, use the copy() function to copy the value for your template: copy ( this . caseDefinition . templateEventFormListItemSecondary ) Then add the fields or functions you need. In this case, I'm adding a getValue: `<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${ ! eventForm . complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>' } ${ response ? `Version: ${ getValue ( \"content_release_version\" ) } ` : '' } ` Output: \"<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: <t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang> Start date: 3/13/2020, 11:25:19 AM\" Note that I was testing for existence of response, and also nesting templates to show the \"Version\" text if there was a value for content_release_version. Another example: <t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${!eventForm.complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>'} ${response ? Start date: ${response.startDatetime} : ''} debugging templates \u00b6 To make the dev tool stop on a breakpoint in a Case Definition's template, add the following debugger statement to the content of the template. $ {(()=>{ debugger })()} When that template loads, the Chrome devtools will pause and you can inspect local variables/functions available and try running them in the console. Note that different templates will have different helper functions and variables available.","title":"Viewing Forms and Form Data"},{"location":"developer/viewing-forms-and-data/#viewing-forms-and-form-data","text":"Use TangyFormService to retrieve form definitions and response data: this . formResponse = await this . tangyFormService . getResponse ( this . eventForm . formResponseId ) const tangyFormMarkup = await this . tangyFormService . getFormMarkup ( this . eventFormDefinition . formId ) But there are other ways of getting data out of Tangerine. First you need to see where you are getting data from.","title":"Viewing Forms and Form Data"},{"location":"developer/viewing-forms-and-data/#mapping-of-components-to-forms","text":"EventFormListItemComponent - listing of forms in an event CaseEventListItemComponent - listing of events (such as Followup ANC Visits) in a case.","title":"Mapping of components to forms"},{"location":"developer/viewing-forms-and-data/#helper-functions-already-in-components","text":"In the component for a list, helper functions may already expose the properties you need to populate a template. In EventFormListItemComponent, notice the variable exposed: const response = await this . formService . getResponse ( this . eventForm . formResponseId ) const getValue = ( variableName ) => { // more code inside getValue(); }, {}) // snip const caseInstance = this . case const caseDefinition = this . caseDefinition const caseEventDefinition = this . caseEventDefinition const caseEvent = this . caseEvent const eventForm = this . eventForm const eventFormDefinition = this . eventFormDefinition const formatDate = ( unixTimeInMilliseconds , format ) => moment ( new Date ( unixTimeInMilliseconds )). format ( format ) const TRANSLATE = _TRANSLATE eval ( `this.renderedTemplateListItemIcon = this.caseDefinition.templateEventFormListItemIcon ? \\` ${ this . caseDefinition . templateEventFormListItemIcon } \\` : \\` ${ this . defaultTemplateListItemIcon } \\`` ) eval ( `this.renderedTemplateListItemPrimary = this.caseDefinition.templateEventFormListItemPrimary ? \\` ${ this . caseDefinition . templateEventFormListItemPrimary } \\` : \\` ${ this . defaultTemplateListItemPrimary } \\`` ) eval ( `this.renderedTemplateListItemSecondary = this.caseDefinition.templateEventFormListItemSecondary ? \\` ${ this . caseDefinition . v } \\` : \\` ${ this . defaultTemplateListItemSecondary } \\`` ) If there is not a response for a form, response will be false; therefore, if you do a getValue() in your template, be sure to test if response is true. If you wish to display the startDatetime in your template, note that is is part of the response object - it is returned as response.startDatetime. In other cases - for values inside the form - use getValue(variableName) - but test if response is true first! Also, remember that the variableName is one of the id's in the inputs array, which is inside each item in the items array.","title":"Helper functions already in components"},{"location":"developer/viewing-forms-and-data/#testing-your-templates","text":"Here's an easy way to test your template code: in the js console, use the copy() function to copy the value for your template: copy ( this . caseDefinition . templateEventFormListItemSecondary ) Then add the fields or functions you need. In this case, I'm adding a getValue: `<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${ ! eventForm . complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>' } ${ response ? `Version: ${ getValue ( \"content_release_version\" ) } ` : '' } ` Output: \"<t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: <t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang> Start date: 3/13/2020, 11:25:19 AM\" Note that I was testing for existence of response, and also nesting templates to show the \"Version\" text if there was a value for content_release_version. Another example: <t-lang en>Status</t-lang><t-lang fr>Statut</t-lang>: ${!eventForm.complete ? '<t-lang en>Incomplete</t-lang><t-lang fr>Incompl\u00e8te</t-lang>' : '<t-lang en>Complete</t-lang><t-lang fr>Achev\u00e9e</t-lang>'} ${response ? Start date: ${response.startDatetime} : ''}","title":"Testing your templates"},{"location":"developer/viewing-forms-and-data/#debugging-templates","text":"To make the dev tool stop on a breakpoint in a Case Definition's template, add the following debugger statement to the content of the template. $ {(()=>{ debugger })()} When that template loads, the Chrome devtools will pause and you can inspect local variables/functions available and try running them in the console. Note that different templates will have different helper functions and variables available.","title":"debugging templates"},{"location":"editor/","text":"Editor Guide \u00b6 Tangerine Form Editor's Cookbook Local Content Development with Tangerine Preview Configuring Case functionality Case Module Cookbook Configuration Guide","title":"Editor Guide"},{"location":"editor/#editor-guide","text":"Tangerine Form Editor's Cookbook Local Content Development with Tangerine Preview Configuring Case functionality Case Module Cookbook Configuration Guide","title":"Editor Guide"},{"location":"editor/case-management-group/","text":"Case Management Group (experimental) \u00b6 Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"search\" as the \"homeUrl\" value in app-config.json . Configuring Cases \u00b6 Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] } Debugging Case Templates \u00b6 Configuring search \u00b6 The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ] Configuring two-way sync \u00b6 Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases.","title":"Case Management Group (experimental)"},{"location":"editor/case-management-group/#case-management-group-experimental","text":"Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. In order to create and find cases, you will need to configure the \"search\" as the \"homeUrl\" value in app-config.json .","title":"Case Management Group (experimental)"},{"location":"editor/case-management-group/#configuring-cases","text":"Case Management allows us to define Case Definitions for different purposes such as following a participant in a drug trial over the course of many events, where each event may require many forms to be filled out. To configure cases, there are four files to modify. First add a reference to the new Case Definition in the case-definitions.json . Here is an example of a case-definitions.json file that references two Case Definitions. File: case-definitions.json [ { \"id\": \"case-definition-1\", \"name\": \"Case Definition 1\", \"src\": \"./assets/case-definition-1.json\" }, { \"id\": \"case-definition-2\", \"name\": \"Case Definition 2\", \"src\": \"./assets/case-definition-2.json\" } ] Then create the corresponding Case Definition file... File: case-definition-1.json { \"id\" : \"case-definition-1\" , \"formId\" : \"case-definition-1-manifest\" , \"name\" : \"Case Definition 1\" , \"description\" : \"Description...\" , \"startFormOnOpen\" : { \"eventId\" : \"event-definition-1\" , \"eventFormId\" : \"event-form-1\" }, \"eventDefinitions\" : [ { \"id\" : \"event-definition-1\" , \"name\" : \"Event Definition 1\" , \"description\" : \"Description...\" , \"repeatable\" : false , \"required\" : true , \"eventFormDefinitions\" : [ { \"id\" : \"event-form-definition-1\" , \"formId\" : \"form-1\" , \"name\" : \"Form 1\" , \"required\" : true , \"repeatable\" : false } ] } ] }","title":"Configuring Cases"},{"location":"editor/case-management-group/#debugging-case-templates","text":"","title":"Debugging Case Templates"},{"location":"editor/case-management-group/#configuring-search","text":"The case references a Form in the formId property of the Case Definition. Make sure there is a form with that corresponding Form ID listed in forms.json with additional configuration for search. File: forms.json [ { \"id\" : \"case-definition-1-manifest\" , \"type\" : \"case\" , \"title\" : \"Case Definition 1 Manifest\" , \"description\" : \"Description...\" , \"listed\" : true , \"src\" : \"./assets/case-definition-1-manifest/form.html\" , \"searchSettings\" : { \"primaryTemplate\" : \"Participant ID: ${searchDoc.variables.participant_id}\" , \"shouldIndex\" : true , \"secondaryTemplate\" : \"Enrollment Date: ${searchDoc.variables.enrollment_date}, Case ID: ${searchDoc._id}\" , \"variablesToIndex\" : [ \"participant_id\" , \"enrollment_date\" ] } } ]","title":"Configuring search"},{"location":"editor/case-management-group/#configuring-two-way-sync","text":"Because you may need to share cases across devices, configuring two-way sync may be necessary. See the Two-way Sync Documentation for more details. Note that you sync Form Responses, and it's the IDs of that you'll want to sync in the \"formId\" of the Case Definition in order to sync cases.","title":"Configuring two-way sync"},{"location":"editor/case-module-cookbook/","text":"Case Module Cookbook \u00b6 Get data from participant related to current Event Form \u00b6 In the following example, from an on-change hook or on-open , we can look up the corresponding participant for the current form, then look the age variable that has been previously set on that participant. const currentEventId = window . location . hash . split ( '/' )[ 5 ] const currentFormId = window . location . hash . split ( '/' )[ 6 ] const participantId = caseService . case . events . find ( event => event . id === currentEventId ) . eventForms . find ( eventForm => eventForm . id === currentFormId ) . participantId const age = caseService . getParticipantData ( participantId , 'age' )","title":"Case Module Cookbook"},{"location":"editor/case-module-cookbook/#case-module-cookbook","text":"","title":"Case Module Cookbook"},{"location":"editor/case-module-cookbook/#get-data-from-participant-related-to-current-event-form","text":"In the following example, from an on-change hook or on-open , we can look up the corresponding participant for the current form, then look the age variable that has been previously set on that participant. const currentEventId = window . location . hash . split ( '/' )[ 5 ] const currentFormId = window . location . hash . split ( '/' )[ 6 ] const participantId = caseService . case . events . find ( event => event . id === currentEventId ) . eventForms . find ( eventForm => eventForm . id === currentFormId ) . participantId const age = caseService . getParticipantData ( participantId , 'age' )","title":"Get data from participant related to current Event Form"},{"location":"editor/class/","text":"Class module \u00b6 Feedback \u00b6 Feedback for each form item (subtask) can be entered using the Settings editor. Feedback is displayed if available on the Student grouping report. The following fields are available: - ${feedback.example} - ${feedback.skill} - ${feedback.assignment} The following code can be used to format feedback on the Student Grouping report: <div class='feedback-assignment'>${feedback.assignment}</div> <div class='feedback-example'>${feedback.example}.</div> Note that the use of these formatting commands are optional. Here is a sample feedback message that uses this formatting: These students are doing really well. Consider framing your feedback to these student as follows: <div class='feedback-example'>${feedback.example}.</div> Reflect on these students results: why do you think did these students were particularly successful in ${feedback.skill}. Was there a specific ${feedback.skill} strategy or activity you used? Did they already know this content? Is there another strategy or activity they could do to extend their ${feedback.skill} skills? Consider giving these students supplementary story: <div class='feedback-assignment'>${feedback.assignment}</div> to read and make 3-5 inferential questions for them to answer. You may also consider engaging these students as peer mentors to others as these other students do additional practice. Scoring \u00b6 There are 3 options for scoring in Class: - Using a TANGY-TIMED grid - Using a hidden formId+_score field to store the calculated score value when the form is submitted using the on-change javascript - Using a score calculated at report run-time. The dashboard.service populaceTransformedResult function loops through the inputs; for each item type, it calculates the value, score, and max. It also keeps a running tally of the sum of all max values (totalMax). Here are the default rules for each input type: * TANGY-INPUT: * value: value field * score: value field * max: max field * TANGY-RADIO-BUTTONS: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. * TANGY-CHECKBOXES: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. For a TANGY-TIMED input, once the value and score have been calculated for each item and populated into an answeredQuestions array, we loop through this array and calculate aggregates for the tangy-form-item. TANGY-TIMED: value: score: totalCorrect For tangy form items that use a _score field: Calculate the totalAnswers by subtracting 1 from the item.inputs.length (to account for the _score field) Use score for totalCorrect and totalAnswers for maxValueAnswer, unless the max value was assigned earlier. Finally, there is support for calculating the score at report-time by looping through answeredQuestions and summing the score and max values.","title":"Class module"},{"location":"editor/class/#class-module","text":"","title":"Class module"},{"location":"editor/class/#feedback","text":"Feedback for each form item (subtask) can be entered using the Settings editor. Feedback is displayed if available on the Student grouping report. The following fields are available: - ${feedback.example} - ${feedback.skill} - ${feedback.assignment} The following code can be used to format feedback on the Student Grouping report: <div class='feedback-assignment'>${feedback.assignment}</div> <div class='feedback-example'>${feedback.example}.</div> Note that the use of these formatting commands are optional. Here is a sample feedback message that uses this formatting: These students are doing really well. Consider framing your feedback to these student as follows: <div class='feedback-example'>${feedback.example}.</div> Reflect on these students results: why do you think did these students were particularly successful in ${feedback.skill}. Was there a specific ${feedback.skill} strategy or activity you used? Did they already know this content? Is there another strategy or activity they could do to extend their ${feedback.skill} skills? Consider giving these students supplementary story: <div class='feedback-assignment'>${feedback.assignment}</div> to read and make 3-5 inferential questions for them to answer. You may also consider engaging these students as peer mentors to others as these other students do additional practice.","title":"Feedback"},{"location":"editor/class/#scoring","text":"There are 3 options for scoring in Class: - Using a TANGY-TIMED grid - Using a hidden formId+_score field to store the calculated score value when the form is submitted using the on-change javascript - Using a score calculated at report run-time. The dashboard.service populaceTransformedResult function loops through the inputs; for each item type, it calculates the value, score, and max. It also keeps a running tally of the sum of all max values (totalMax). Here are the default rules for each input type: * TANGY-INPUT: * value: value field * score: value field * max: max field * TANGY-RADIO-BUTTONS: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. * TANGY-CHECKBOXES: * value: loops through the options and uses the value from the non-empty option * score: value * max: Use value of the highest option. For a TANGY-TIMED input, once the value and score have been calculated for each item and populated into an answeredQuestions array, we loop through this array and calculate aggregates for the tangy-form-item. TANGY-TIMED: value: score: totalCorrect For tangy form items that use a _score field: Calculate the totalAnswers by subtracting 1 from the item.inputs.length (to account for the _score field) Use score for totalCorrect and totalAnswers for maxValueAnswer, unless the max value was assigned earlier. Finally, there is support for calculating the score at report-time by looping through answeredQuestions and summing the score and max values.","title":"Scoring"},{"location":"editor/configuration/","text":"Configuration \u00b6 App Configuration \u00b6 app-config.json should have the following properties defined. homeUrl:string The default route to load when no route is specified. Think of this as the root url securityPolicy:string[] . This is an array of all the combinations of the security policies to be enforced in the app. NOTE: noPassword and password are mutually exclusive. Only one should be provided and not both. password noPassword associateUserProfileMode : This is the mode that determines where a user profiles comes from after a user has created an account on a device. Note, a \"User\" is tied together across devices by a single \"User Profile\". The account on the device is simply a security mechanism for using the profiles. remote : Selecting this will result in a user being promted to enter a \"code\" after they register an account. This code is the last 6 characters of their User Profile ID. Typically a Group Admin would create a User Profile doc on the server and then send this code to the person associated with the User Profile. When the user enters this code on the tablet, the tablet will reach out over the Internet and download the corresponding User Profile and any content associated with that User Profile. Because all content is downloaded for that user, it can also be used as a way to fully restore a user's data on a new or recovered tablet. However note that this data is mode is not compatible with using CouchDB sync settings on any form definitions' sync settings. local-new : This option allows users who register an Account on a tablet to create a new User Profile. This is also the default if no option is selected. local-exists : This option is useful when using devices are set up using the \"Centrally Managed Device\" setup which would result in a facility's User Profiles already being on that device. When this option is selected, a drop down of unclaimed user profiles appears when accounts are being registered.","title":"Configuration"},{"location":"editor/configuration/#configuration","text":"","title":"Configuration"},{"location":"editor/configuration/#app-configuration","text":"app-config.json should have the following properties defined. homeUrl:string The default route to load when no route is specified. Think of this as the root url securityPolicy:string[] . This is an array of all the combinations of the security policies to be enforced in the app. NOTE: noPassword and password are mutually exclusive. Only one should be provided and not both. password noPassword associateUserProfileMode : This is the mode that determines where a user profiles comes from after a user has created an account on a device. Note, a \"User\" is tied together across devices by a single \"User Profile\". The account on the device is simply a security mechanism for using the profiles. remote : Selecting this will result in a user being promted to enter a \"code\" after they register an account. This code is the last 6 characters of their User Profile ID. Typically a Group Admin would create a User Profile doc on the server and then send this code to the person associated with the User Profile. When the user enters this code on the tablet, the tablet will reach out over the Internet and download the corresponding User Profile and any content associated with that User Profile. Because all content is downloaded for that user, it can also be used as a way to fully restore a user's data on a new or recovered tablet. However note that this data is mode is not compatible with using CouchDB sync settings on any form definitions' sync settings. local-new : This option allows users who register an Account on a tablet to create a new User Profile. This is also the default if no option is selected. local-exists : This option is useful when using devices are set up using the \"Centrally Managed Device\" setup which would result in a facility's User Profiles already being on that device. When this option is selected, a drop down of unclaimed user profiles appears when accounts are being registered.","title":"App Configuration"},{"location":"editor/cookbook/","text":"The Tangerine Form Editor's Cookbook \u00b6 Examples of various recipes for Tangerine Forms collected throughout the years. To create your own example, remix the example on glitch.com. Skip a question based on input in another question \u00b6 In the following example we ask an additional question about tangerines if the user indicates that they do like tangerines. Run example - Open Editor - View Code Skip sections based on input \u00b6 In the following example, wether or not you answer yes or no to the question, you will end up on a different item. Run example - Open Editor - View Code Valid by number of decimal points \u00b6 In the following example, we validate user input by number of decimal points. Run example - Open Editor - View Code Valid if greater or less than other input \u00b6 Run example - Open Editor - View Code Allowed date range based on today \u00b6 Run example - Open Editor - View Code Flag choice as discrepancy and/or warning and show or hide content depending \u00b6 Run example - Open Editor - View Code Indicate a mutually exclusive option in a checkboxes group such as \"None of the above\" \u00b6 In the following example when you make a selection of a fruit and then choose one of the mutually exclusive options, your prior selections will be deselected. Run example - Open Editor - View Code Capture and show local date and time \u00b6 Sometimes we want to show the user the local date and time to ensure their time settings are correct. Run example - Open Editor - View Code Show a timer in an item \u00b6 Let's say you want to show a timer of how long someone has been on a single item. This calculates the time since item open and displays number of seconds since then in a tangy-box. Run example - Open Editor - View Code Capture the time between two items \u00b6 Sometimes we want to know how much time passed between two points in a form. This example captures, the start_time variable on the first item, then end_time on the last item. Lastly it calculates the length of time. Run example - Open Editor - View Code Hard checks vs. soft checks \u00b6 A \"hard check\" using \"valid if\" will not allow you to proceed. However a \"soft check\" using \"warn if\" will allow you to proceed after confirming. Run example - Open Editor - View Code Set selected value in radio buttons \u00b6 In the following example we set the value of a <tangy-radio-buttons> . Run example - Open Editor - View Code Dynamically prevent proceeding to next section \u00b6 In the following example hide the next button given the value of some user input. Run example - Open Editor - View Code","title":"The Tangerine Form Editor's Cookbook"},{"location":"editor/cookbook/#the-tangerine-form-editors-cookbook","text":"Examples of various recipes for Tangerine Forms collected throughout the years. To create your own example, remix the example on glitch.com.","title":"The Tangerine Form Editor's Cookbook"},{"location":"editor/cookbook/#skip-a-question-based-on-input-in-another-question","text":"In the following example we ask an additional question about tangerines if the user indicates that they do like tangerines. Run example - Open Editor - View Code","title":"Skip a question based on input in another question"},{"location":"editor/cookbook/#skip-sections-based-on-input","text":"In the following example, wether or not you answer yes or no to the question, you will end up on a different item. Run example - Open Editor - View Code","title":"Skip sections based on input"},{"location":"editor/cookbook/#valid-by-number-of-decimal-points","text":"In the following example, we validate user input by number of decimal points. Run example - Open Editor - View Code","title":"Valid by number of decimal points"},{"location":"editor/cookbook/#valid-if-greater-or-less-than-other-input","text":"Run example - Open Editor - View Code","title":"Valid if greater or less than other input"},{"location":"editor/cookbook/#allowed-date-range-based-on-today","text":"Run example - Open Editor - View Code","title":"Allowed date range based on today"},{"location":"editor/cookbook/#flag-choice-as-discrepancy-andor-warning-and-show-or-hide-content-depending","text":"Run example - Open Editor - View Code","title":"Flag choice as discrepancy and/or warning and show or hide content depending"},{"location":"editor/cookbook/#indicate-a-mutually-exclusive-option-in-a-checkboxes-group-such-as-none-of-the-above","text":"In the following example when you make a selection of a fruit and then choose one of the mutually exclusive options, your prior selections will be deselected. Run example - Open Editor - View Code","title":"Indicate a mutually exclusive option in a checkboxes group such as \"None of the above\""},{"location":"editor/cookbook/#capture-and-show-local-date-and-time","text":"Sometimes we want to show the user the local date and time to ensure their time settings are correct. Run example - Open Editor - View Code","title":"Capture and show local date and time"},{"location":"editor/cookbook/#show-a-timer-in-an-item","text":"Let's say you want to show a timer of how long someone has been on a single item. This calculates the time since item open and displays number of seconds since then in a tangy-box. Run example - Open Editor - View Code","title":"Show a timer in an item"},{"location":"editor/cookbook/#capture-the-time-between-two-items","text":"Sometimes we want to know how much time passed between two points in a form. This example captures, the start_time variable on the first item, then end_time on the last item. Lastly it calculates the length of time. Run example - Open Editor - View Code","title":"Capture the time between two items"},{"location":"editor/cookbook/#hard-checks-vs-soft-checks","text":"A \"hard check\" using \"valid if\" will not allow you to proceed. However a \"soft check\" using \"warn if\" will allow you to proceed after confirming. Run example - Open Editor - View Code","title":"Hard checks vs. soft checks"},{"location":"editor/cookbook/#set-selected-value-in-radio-buttons","text":"In the following example we set the value of a <tangy-radio-buttons> . Run example - Open Editor - View Code","title":"Set selected value in radio buttons"},{"location":"editor/cookbook/#dynamically-prevent-proceeding-to-next-section","text":"In the following example hide the next button given the value of some user input. Run example - Open Editor - View Code","title":"Dynamically prevent proceeding to next section"},{"location":"editor/editor-guide/","text":"Releasing updates to existing forms \u00b6 Gotchas \u00b6 If you remove an input from an item or move that input to another item, when a user resumes a form response that was created with the prior version, content for that input will appear to have dissappeared. If you add remove an item from a form, when users resume form responses created on with the prior version, it will appear they have lost data since the item has been removed.","title":"Releasing updates to existing forms"},{"location":"editor/editor-guide/#releasing-updates-to-existing-forms","text":"","title":"Releasing updates to existing forms"},{"location":"editor/editor-guide/#gotchas","text":"If you remove an input from an item or move that input to another item, when a user resumes a form response that was created with the prior version, content for that input will appear to have dissappeared. If you add remove an item from a form, when users resume form responses created on with the prior version, it will appear they have lost data since the item has been removed.","title":"Gotchas"},{"location":"editor/feature-two-way-sync/","text":"Feature: Two Way Sync (experimental) \u00b6 This feature when enabled allows some or all of forms responses to be synced between devices. The form responses that are synced depend on which forms are configured for sync and limited to a grouping by the \"location\" field in that users' profile. For example: An installation has two Forms, Form A and Form B. Only Form A is configured to sync. User A who has \"facility 1\" assigned to them in their user profile creates a form response for Form A and Form B then initiates a sync to find that two form responses have been pushed up. User B has \"facility 1\" assigned to them in their user profile and initiates a sync to find they pulled down one form response for Form A that originated on User A's device. If User B modifies this form response, it will be pushed on the next sync and then later User A would pull down the change. Let's say there is a User C who is assigned to \"facility 2\" in their user profile. When they initiate a sync, they will not receive any form responses from the server because the server only has form responses from User A who is assigned to \"facility 1\". Configuration \u00b6 @TODO Merge conflicts \u00b6 When syncing, there may be cases where two tablets may both modify a form response and then try to sync. This will cause a merge conflict and will be flagged and listed as a merge conflict on the device. Currently the only way to resolve this merge conflict is manually on the server using the Futon database interface. When conflicts are resolved, their resolution will replicate to the tablets on the next sync.","title":"Feature: Two Way Sync (experimental)"},{"location":"editor/feature-two-way-sync/#feature-two-way-sync-experimental","text":"This feature when enabled allows some or all of forms responses to be synced between devices. The form responses that are synced depend on which forms are configured for sync and limited to a grouping by the \"location\" field in that users' profile. For example: An installation has two Forms, Form A and Form B. Only Form A is configured to sync. User A who has \"facility 1\" assigned to them in their user profile creates a form response for Form A and Form B then initiates a sync to find that two form responses have been pushed up. User B has \"facility 1\" assigned to them in their user profile and initiates a sync to find they pulled down one form response for Form A that originated on User A's device. If User B modifies this form response, it will be pushed on the next sync and then later User A would pull down the change. Let's say there is a User C who is assigned to \"facility 2\" in their user profile. When they initiate a sync, they will not receive any form responses from the server because the server only has form responses from User A who is assigned to \"facility 1\".","title":"Feature: Two Way Sync (experimental)"},{"location":"editor/feature-two-way-sync/#configuration","text":"@TODO","title":"Configuration"},{"location":"editor/feature-two-way-sync/#merge-conflicts","text":"When syncing, there may be cases where two tablets may both modify a form response and then try to sync. This will cause a merge conflict and will be flagged and listed as a merge conflict on the device. Currently the only way to resolve this merge conflict is manually on the server using the Futon database interface. When conflicts are resolved, their resolution will replicate to the tablets on the next sync.","title":"Merge conflicts"},{"location":"editor/local-content-development/","text":"Local content development with Tangerine Preview \u00b6 Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux. Install \u00b6 Before you install tangerine-preview , make sure to install node.js . Install the Tangerine Preview tool by opening a command prompt and running the following command. npm install -g tangerine-preview Preview your content \u00b6 Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes. Update tangerine-preview \u00b6 When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Local content development"},{"location":"editor/local-content-development/#local-content-development-with-tangerine-preview","text":"Tangerine Preview is a command line tool for previewing the Tangerine content you are working on your local computer. It work on Windows, Mac, and Linux.","title":"Local content development with Tangerine Preview"},{"location":"editor/local-content-development/#install","text":"Before you install tangerine-preview , make sure to install node.js . Install the Tangerine Preview tool by opening a command prompt and running the following command. npm install -g tangerine-preview","title":"Install"},{"location":"editor/local-content-development/#preview-your-content","text":"Open a command prompt, change directory to your content that you would like to preview, then run the tangerine-preview command. cd your-project tangerine-preview Lastly, open Google Chrome to http://localhost:3000 As you make content changes, they will be synced to the app. Reload your web browser and you'll see the changes.","title":"Preview your content"},{"location":"editor/local-content-development/#update-tangerine-preview","text":"When new releases come out for tangerine, tangerine-preview will also be updated. To update, open a command prompt and run the install command again. npm install -g tangerine-preview","title":"Update tangerine-preview"},{"location":"p2p/p2p-sync/","text":"Using P2P Sync for Offline Data Transfer \u00b6 Use the P2P sync feature to transfer data between two or more tablets without an Internet connection. Note: The tablets must be running Android 8 (Oreo) to use this function. In the following example, your tablet will be syncing data from your tablet to two other peers' tablets running Tangerine. The goal is to have the same data on all tablets. At the end of the process, data will be transferred from your tablet to the Internet. Accessing the P2P feature: \u00b6 Each peer should select Sync from the menu. Click the P2P Sync tab. Discovery \u00b6 Gather in a circle with your peers. You and your peers should click the Discovery button. It does not matter who clicks first. Endpoints \u00b6 After a short time - a minute of two, the screen will show the device name, a list of available endpoints, and information about the data transfers in the Log. In the screenshot, your device name is highlighted in green (89678). The list of available endpoints - your peers' tablet names - is highlighted in red. A log of diagnostic information is highlighted in blue. (Please note that the endpoint names are randomly generated. The names you see when using this feature will be different.) Syncing to an Endpoint \u00b6 At this point in the process, your peers don't need to push any buttons; they only need to monitor the sync process for errors. Your tablet will be called the \"master\" tablet because it is controlling the sync operations. Once the \"master\" tablet has collected all of the data from the tablets, it can be connected to the Internet and upload all of this data to the server. Ask your peers which one has the tab at the top of the endpoints list marked \"35747 - Pending\". Upon identifying that peer, ask them to pay attention to the screen. Now you may click \"35747 - Pending\" to initiate the data transfer. Notice how the endpoint button you click turns a darker shade of grey to indicate that it has been pressed. Your tablet will send its data to your peer's tablet and then your peer's tablet will send its data back to your tablet, as well as the data you just sent. It's a little redundant, but this is part of reaching \"eventual consistency\" for all of the tablets. Notice that more data is added to the Log as the connection is made between the tablets and data transfer is initiated: When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages; if not, it is safe to proceed to the next peer's tablet. Ask the peer who has the tablet marked \"29726\" to be ready. Click the endpoint marked \"29726: Pending\". When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages. If none, great! Since you're at the end of the endpoints list, you are done with this first part. Do it again! \u00b6 When you synced data from your \"master\" tablet to the second tablet, it received data from the first tablet, which was transferred to the \"master\" when it was sync'd. But the first tablet still needs to receive data from the second tablet. So, you will need to repeat this whole process, starting from the first tablet (35747) and then to the second (29726). (You actually don't need to sync again the final device sync'd in the process (29726), but it is easier to explain this process as a simple round-robin.) It may be useful to confirm that any records created on other tablets has indeed been transferred. English: French: As mentioned earlier, once the sync process is complete (and you've done it twice), you may conect the \"master\" to the Internet and transfer data to the server. Tips \u00b6 Each time you visit the P2P page, your device name will change. It is a randomly generated number. Errors are highlighted in pink. It is fine to ignore the error marked \"State set to CONNECTED but already in that state\".","title":"Using P2P Sync for Offline Data Transfer"},{"location":"p2p/p2p-sync/#using-p2p-sync-for-offline-data-transfer","text":"Use the P2P sync feature to transfer data between two or more tablets without an Internet connection. Note: The tablets must be running Android 8 (Oreo) to use this function. In the following example, your tablet will be syncing data from your tablet to two other peers' tablets running Tangerine. The goal is to have the same data on all tablets. At the end of the process, data will be transferred from your tablet to the Internet.","title":"Using P2P Sync for Offline Data Transfer"},{"location":"p2p/p2p-sync/#accessing-the-p2p-feature","text":"Each peer should select Sync from the menu. Click the P2P Sync tab.","title":"Accessing the P2P feature:"},{"location":"p2p/p2p-sync/#discovery","text":"Gather in a circle with your peers. You and your peers should click the Discovery button. It does not matter who clicks first.","title":"Discovery"},{"location":"p2p/p2p-sync/#endpoints","text":"After a short time - a minute of two, the screen will show the device name, a list of available endpoints, and information about the data transfers in the Log. In the screenshot, your device name is highlighted in green (89678). The list of available endpoints - your peers' tablet names - is highlighted in red. A log of diagnostic information is highlighted in blue. (Please note that the endpoint names are randomly generated. The names you see when using this feature will be different.)","title":"Endpoints"},{"location":"p2p/p2p-sync/#syncing-to-an-endpoint","text":"At this point in the process, your peers don't need to push any buttons; they only need to monitor the sync process for errors. Your tablet will be called the \"master\" tablet because it is controlling the sync operations. Once the \"master\" tablet has collected all of the data from the tablets, it can be connected to the Internet and upload all of this data to the server. Ask your peers which one has the tab at the top of the endpoints list marked \"35747 - Pending\". Upon identifying that peer, ask them to pay attention to the screen. Now you may click \"35747 - Pending\" to initiate the data transfer. Notice how the endpoint button you click turns a darker shade of grey to indicate that it has been pressed. Your tablet will send its data to your peer's tablet and then your peer's tablet will send its data back to your tablet, as well as the data you just sent. It's a little redundant, but this is part of reaching \"eventual consistency\" for all of the tablets. Notice that more data is added to the Log as the connection is made between the tablets and data transfer is initiated: When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages; if not, it is safe to proceed to the next peer's tablet. Ask the peer who has the tablet marked \"29726\" to be ready. Click the endpoint marked \"29726: Pending\". When the data transfer is complete, the endpoint list updates to show that you are ready to sync the next device (\"Done! Sync next device.\"). Ask your peer if they received any error messages. If none, great! Since you're at the end of the endpoints list, you are done with this first part.","title":"Syncing to an Endpoint"},{"location":"p2p/p2p-sync/#do-it-again","text":"When you synced data from your \"master\" tablet to the second tablet, it received data from the first tablet, which was transferred to the \"master\" when it was sync'd. But the first tablet still needs to receive data from the second tablet. So, you will need to repeat this whole process, starting from the first tablet (35747) and then to the second (29726). (You actually don't need to sync again the final device sync'd in the process (29726), but it is easier to explain this process as a simple round-robin.) It may be useful to confirm that any records created on other tablets has indeed been transferred. English: French: As mentioned earlier, once the sync process is complete (and you've done it twice), you may conect the \"master\" to the Internet and transfer data to the server.","title":"Do it again!"},{"location":"p2p/p2p-sync/#tips","text":"Each time you visit the P2P page, your device name will change. It is a randomly generated number. Errors are highlighted in pink. It is fine to ignore the error marked \"State set to CONNECTED but already in that state\".","title":"Tips"},{"location":"system-administrator/","text":"System Administrator Guide \u00b6","title":"System Administrator Guide"},{"location":"system-administrator/#system-administrator-guide","text":"","title":"System Administrator Guide"},{"location":"system-administrator/install-on-aws/","text":"Installing Tangerine on AWS \u00b6 Creating the AWS instance \u00b6 Login to AWS and Launch a new instance with Ubuntu 16.04 using a t2.medium server with 4 GiB memory. Volume should be larger than the 8GB default. 24GB would be useful. Security \u00b6 Make sure to assign a security group to your instance that allows you to access port 80 via a web browser and port 22 via ssh. HTTP: TCP 80 0.0.0.0/0 SSH TCP 22 0.0.0.0/0 Set up SSL \u00b6 Prerequisites: - An SSL Certificate. If you don't yet have one, we recommend using AWS's Certificate Manager (found under \"Security, Identity, and Compliance\"). Create and Configure an Elastic Load Balancer (ELB): - Go to EC2, click \"Load Balancers\" in the left column, click \"Create Load Balancer\", and then select \"Classic Load Balancer\". - Step 1: Define Load Balancer - Set a Load Balancer name to what you want. - Set \"Load Balancer Protocol\" on the left most column to \"HTTPS\". - Set \"Instance Protocol\" in the third column to \"HTTP\". - Click \"Add\". - In the new row set \"Load Balancer Protocol\" to \"HTTP\" and \"Instance Protocol\" to \"HTTP\". - Click \"Next\". - Step 2: Assign Security Groups - Select \"Create a new security group\". - Set rules for both HTTP and HTTPS. If you only do HTTPS, anyone who goes to http://yourdomain.com will get an Access Denied message. Allow them to access the site with HTTP, the software will forward them to HTTPS automatically. - Click \"Next\". - Step 3: Configure Security Settings - If you have an SSL certificate, you can upload that here. Otherwise select \"Choose an existing certificate from AWS Certificate Manager (ACM)\". - If you have not requested a certificate for your domain yet, you will need to click \"Request a new certificate from ACM\" and follow those instructions before proceeding. - Step 4: Configure Health Check - Ping Protocol: HTTP - Ping Port: 80 - Ping Path: /app/tangerine/index.html - Response Timeout: 5 seconds - Interval: 10 seconds - Unhealthy threshold: 10 - Healthy threshold: 2 - Step 5: Add EC2 Instances - Select the EC2 instance running Tangerine. - Step 6: Add Tags - No tags are required for Tangerine. - Step 7: Review - If everything looks good, go ahead and create it! - Now proceed to your Load Balancers dashboard, click on your load balancer, click on the Instances tab, and now wait for your EC2 instance to be listed as \"InService\". - Configure your domain's DNS to point to this load balancer by clicking on the load balancer's Description tab and using the \"DNS name\" given to configure your Domain's DNS. Login \u00b6 Once your server is created, login with your key: ssh -i ~/.ssh/iyour_key -l ubuntu <your EC2 instance's IP address> Install Docker \u00b6 Follow the instructions here: https://docs.docker.com/engine/installation/linux/ubuntulinux/ Install Tangerine \u00b6 Follow the instructions here: https://github.com/tangerine-community/tangerine#installation View Tangerine in browser \u00b6 You should now be able to view Tangerine in your web browser by pasting the ip address of your instance and log in with the credentials for user1 that you added to your config.sh .","title":"Installing Tangerine on AWS"},{"location":"system-administrator/install-on-aws/#installing-tangerine-on-aws","text":"","title":"Installing Tangerine on AWS"},{"location":"system-administrator/install-on-aws/#creating-the-aws-instance","text":"Login to AWS and Launch a new instance with Ubuntu 16.04 using a t2.medium server with 4 GiB memory. Volume should be larger than the 8GB default. 24GB would be useful.","title":"Creating the AWS instance"},{"location":"system-administrator/install-on-aws/#security","text":"Make sure to assign a security group to your instance that allows you to access port 80 via a web browser and port 22 via ssh. HTTP: TCP 80 0.0.0.0/0 SSH TCP 22 0.0.0.0/0","title":"Security"},{"location":"system-administrator/install-on-aws/#set-up-ssl","text":"Prerequisites: - An SSL Certificate. If you don't yet have one, we recommend using AWS's Certificate Manager (found under \"Security, Identity, and Compliance\"). Create and Configure an Elastic Load Balancer (ELB): - Go to EC2, click \"Load Balancers\" in the left column, click \"Create Load Balancer\", and then select \"Classic Load Balancer\". - Step 1: Define Load Balancer - Set a Load Balancer name to what you want. - Set \"Load Balancer Protocol\" on the left most column to \"HTTPS\". - Set \"Instance Protocol\" in the third column to \"HTTP\". - Click \"Add\". - In the new row set \"Load Balancer Protocol\" to \"HTTP\" and \"Instance Protocol\" to \"HTTP\". - Click \"Next\". - Step 2: Assign Security Groups - Select \"Create a new security group\". - Set rules for both HTTP and HTTPS. If you only do HTTPS, anyone who goes to http://yourdomain.com will get an Access Denied message. Allow them to access the site with HTTP, the software will forward them to HTTPS automatically. - Click \"Next\". - Step 3: Configure Security Settings - If you have an SSL certificate, you can upload that here. Otherwise select \"Choose an existing certificate from AWS Certificate Manager (ACM)\". - If you have not requested a certificate for your domain yet, you will need to click \"Request a new certificate from ACM\" and follow those instructions before proceeding. - Step 4: Configure Health Check - Ping Protocol: HTTP - Ping Port: 80 - Ping Path: /app/tangerine/index.html - Response Timeout: 5 seconds - Interval: 10 seconds - Unhealthy threshold: 10 - Healthy threshold: 2 - Step 5: Add EC2 Instances - Select the EC2 instance running Tangerine. - Step 6: Add Tags - No tags are required for Tangerine. - Step 7: Review - If everything looks good, go ahead and create it! - Now proceed to your Load Balancers dashboard, click on your load balancer, click on the Instances tab, and now wait for your EC2 instance to be listed as \"InService\". - Configure your domain's DNS to point to this load balancer by clicking on the load balancer's Description tab and using the \"DNS name\" given to configure your Domain's DNS.","title":"Set up SSL"},{"location":"system-administrator/install-on-aws/#login","text":"Once your server is created, login with your key: ssh -i ~/.ssh/iyour_key -l ubuntu <your EC2 instance's IP address>","title":"Login"},{"location":"system-administrator/install-on-aws/#install-docker","text":"Follow the instructions here: https://docs.docker.com/engine/installation/linux/ubuntulinux/","title":"Install Docker"},{"location":"system-administrator/install-on-aws/#install-tangerine","text":"Follow the instructions here: https://github.com/tangerine-community/tangerine#installation","title":"Install Tangerine"},{"location":"system-administrator/install-on-aws/#view-tangerine-in-browser","text":"You should now be able to view Tangerine in your web browser by pasting the ip address of your instance and log in with the credentials for user1 that you added to your config.sh .","title":"View Tangerine in browser"},{"location":"system-administrator/integrate-group-with-github/","text":"Integrate a group's content with a repository on Github \u00b6 Step 1 \u00b6 Create a group in the Editor. Note the ID in the URL starting with group- . Step 2 \u00b6 Create a repository on Github for your group's content. Step 3 \u00b6 SSH into the server and create a \"deploy key\" the server will use to authenticate to Github with. When running ssh-keygen , do not password protect the key file. When it prompts you for a password, just hit enter. ssh <your server> sudo su ssh-keygen -t rsa -b 4096 -C \"your_server_name@domain_of_server\" cat /root/.ssh/id_rsa.pub Copy the key contents that we just \"cat'ed\" to the screen. Then go to your Repository on Github and click on Settings -> Deploy keys -> Add deploy key and paste that key in the key contents, enable \"Allow write access\" and save. Step 4 \u00b6 Now we push our group's initial content to our github repository with the following commands... cd tangerine/data/client/content/groups/<group id> git init git add . git commit -m \"first commit\" git remote add origin <githut repository SSH URL> git push origin master You should now see on your Github Repository code page a list of files pushed from the server. Step 5 \u00b6 We'll now configure your server to periodically pull content changes from Github. ssh <your server> sudo su screen -R git-integration cd tangerine/data/client/content/groups/<group id> watch -n10 \"GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git pull origin master && git add . && git commit -m 'auto-commit' && GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git push origin master At this point you have created \"virtual screen session\" called \"git-integration\" that is using the watch command to run the git pull command every 10 seconds. You'll want to leave this screen session open after your terminal disconnects. To \"detach\" from a screen session but leave it running in the background, press ctrl-a ctrl-d . Now you can safely log out from your SSH session while the screen session continutes. ssh <server> sudo su # List the screen sessions to get the git-pull-worker screen session ID to join. screen -ls # Join the screen session. screen -R <screen session ID, something like 29134.git-integration>","title":"Integrate a group's content with a repository on Github"},{"location":"system-administrator/integrate-group-with-github/#integrate-a-groups-content-with-a-repository-on-github","text":"","title":"Integrate a group's content with a repository on Github"},{"location":"system-administrator/integrate-group-with-github/#step-1","text":"Create a group in the Editor. Note the ID in the URL starting with group- .","title":"Step 1"},{"location":"system-administrator/integrate-group-with-github/#step-2","text":"Create a repository on Github for your group's content.","title":"Step 2"},{"location":"system-administrator/integrate-group-with-github/#step-3","text":"SSH into the server and create a \"deploy key\" the server will use to authenticate to Github with. When running ssh-keygen , do not password protect the key file. When it prompts you for a password, just hit enter. ssh <your server> sudo su ssh-keygen -t rsa -b 4096 -C \"your_server_name@domain_of_server\" cat /root/.ssh/id_rsa.pub Copy the key contents that we just \"cat'ed\" to the screen. Then go to your Repository on Github and click on Settings -> Deploy keys -> Add deploy key and paste that key in the key contents, enable \"Allow write access\" and save.","title":"Step 3"},{"location":"system-administrator/integrate-group-with-github/#step-4","text":"Now we push our group's initial content to our github repository with the following commands... cd tangerine/data/client/content/groups/<group id> git init git add . git commit -m \"first commit\" git remote add origin <githut repository SSH URL> git push origin master You should now see on your Github Repository code page a list of files pushed from the server.","title":"Step 4"},{"location":"system-administrator/integrate-group-with-github/#step-5","text":"We'll now configure your server to periodically pull content changes from Github. ssh <your server> sudo su screen -R git-integration cd tangerine/data/client/content/groups/<group id> watch -n10 \"GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git pull origin master && git add . && git commit -m 'auto-commit' && GIT_SSH_COMMAND='ssh -i /root/.ssh/id_rsa' git push origin master At this point you have created \"virtual screen session\" called \"git-integration\" that is using the watch command to run the git pull command every 10 seconds. You'll want to leave this screen session open after your terminal disconnects. To \"detach\" from a screen session but leave it running in the background, press ctrl-a ctrl-d . Now you can safely log out from your SSH session while the screen session continutes. ssh <server> sudo su # List the screen sessions to get the git-pull-worker screen session ID to join. screen -ls # Join the screen session. screen -R <screen session ID, something like 29134.git-integration>","title":"Step 5"},{"location":"system-administrator/sync-protocol-2/","text":"Sync Protocol 2 \u00b6 Enabling Sync Protocol 2 for new Groups \u00b6 Enable Sync Protocol 2 before creating a new group by editing config.sh by adding \"sync-protocol-2\" to T_MODULES . Create a new group. Define location list levels and content in Config -> Location List . Create a new form in Author -> Forms . Go to Deploy -> Device Users and create new Device Users. Go to Deploy -> Devices and create new Devices. Go to Deploy -> Releases and release the app. \"syncProtocol\":\"2\" Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive it's device ID and token. Upgrade an existing group to Sync Protocol 2 \u00b6 If planning to use `\"syncProtocol\":\"2\" and a project already uses \"centrallyManagedUserProfile\" : true , remove \"centrallyManagedUserProfile\": true and configure the user profile's custom sync settings to push.","title":"Sync Protocol 2"},{"location":"system-administrator/sync-protocol-2/#sync-protocol-2","text":"","title":"Sync Protocol 2"},{"location":"system-administrator/sync-protocol-2/#enabling-sync-protocol-2-for-new-groups","text":"Enable Sync Protocol 2 before creating a new group by editing config.sh by adding \"sync-protocol-2\" to T_MODULES . Create a new group. Define location list levels and content in Config -> Location List . Create a new form in Author -> Forms . Go to Deploy -> Device Users and create new Device Users. Go to Deploy -> Devices and create new Devices. Go to Deploy -> Releases and release the app. \"syncProtocol\":\"2\" Enables a \"Device Setup\" process on first boot of the client application. This requires you set up a \"Device\" record on the server. When setting up a Device record on the server, it will give you a QR code to use to scan from the tablet in order to receive it's device ID and token.","title":"Enabling Sync Protocol 2 for new Groups"},{"location":"system-administrator/sync-protocol-2/#upgrade-an-existing-group-to-sync-protocol-2","text":"If planning to use `\"syncProtocol\":\"2\" and a project already uses \"centrallyManagedUserProfile\" : true , remove \"centrallyManagedUserProfile\": true and configure the user profile's custom sync settings to push.","title":"Upgrade an existing group to Sync Protocol 2"},{"location":"system-administrator/sync-strategies/","text":"Sync Strategies \u00b6 Overview \u00b6 The choice of sync strategy impacts how Tangerine syncs with the server. If you configure a form to use two-way sync, it uses CouchDB replication; otherwise, it uses custom sync. How are these two types of sync different? - CouchDB replication: -- If there is conflicting data on the server, the document update fails and it creates a log of the conflict on the uploaded document -- It currently does not notify the tablet user that there was a conflict. The data on the server displays the previous data, not the new, conflict data. See below how to view the new, conflict data. -- Uses more bandwidth - Custom sync -- If there is conflicting data on the server, it overwrites the document and does not make a log of the conflict. It uses the pouchdb-upsert plugin to do the write. -- Uses less bandwidth How to tell if there are conflicts when using CouchDB replication? \u00b6 Add \"conflicts=true\" to the url if checking view curl, or in your application, add {conflicts: true} option when you get() it. It will list the conflicts: _conflicts:[ \"29-0003a0b8af090d907efecde3aa121416\", \"25-f712a217de615f44c66ddb16b1a53a19\", \"14-bad1258430d22ad41dc9ce4123283c4f\", \"5-3fcde4c45f910b7a0c541e837e4ffd3c\" ] Query the form using \"rev\" in the querystring to view the conflicted version. http://localhost:5984/group-58093841-eaeb-4e51-8675-29757d71fd35/3cec5368-7b89-43cd-9c59-bcd1584dd4ea?rev=5-3fcde4c45f910b7a0c541e837e4ffd3c See https://pouchdb.com/guides/conflicts.html for more information.","title":"Sync Strategies"},{"location":"system-administrator/sync-strategies/#sync-strategies","text":"","title":"Sync Strategies"},{"location":"system-administrator/sync-strategies/#overview","text":"The choice of sync strategy impacts how Tangerine syncs with the server. If you configure a form to use two-way sync, it uses CouchDB replication; otherwise, it uses custom sync. How are these two types of sync different? - CouchDB replication: -- If there is conflicting data on the server, the document update fails and it creates a log of the conflict on the uploaded document -- It currently does not notify the tablet user that there was a conflict. The data on the server displays the previous data, not the new, conflict data. See below how to view the new, conflict data. -- Uses more bandwidth - Custom sync -- If there is conflicting data on the server, it overwrites the document and does not make a log of the conflict. It uses the pouchdb-upsert plugin to do the write. -- Uses less bandwidth","title":"Overview"},{"location":"system-administrator/sync-strategies/#how-to-tell-if-there-are-conflicts-when-using-couchdb-replication","text":"Add \"conflicts=true\" to the url if checking view curl, or in your application, add {conflicts: true} option when you get() it. It will list the conflicts: _conflicts:[ \"29-0003a0b8af090d907efecde3aa121416\", \"25-f712a217de615f44c66ddb16b1a53a19\", \"14-bad1258430d22ad41dc9ce4123283c4f\", \"5-3fcde4c45f910b7a0c541e837e4ffd3c\" ] Query the form using \"rev\" in the querystring to view the conflicted version. http://localhost:5984/group-58093841-eaeb-4e51-8675-29757d71fd35/3cec5368-7b89-43cd-9c59-bcd1584dd4ea?rev=5-3fcde4c45f910b7a0c541e837e4ffd3c See https://pouchdb.com/guides/conflicts.html for more information.","title":"How to tell if there are conflicts when using CouchDB replication?"},{"location":"user-guide/","text":"Tangerine User Guide \u00b6 Application design \u00b6 Please use only the Chrome browser for any of the user guide sections Tangerine Administration Tangerine form development Tangerine group management and releases Tangerine data collection The Tangerine form development process and release is as follows: Create a group. Develop your forms in this group (form rendering). Test your forms and adjust where necessary. Create a release - this generates a Chrome web install or a APK install. Install the app onto a device. Register the device user (each device has independent set of users). Conduct your data collection on the device. Synchronize the results from the device to the server. NOTE: this is done only manually Download the csv from the server to analyse the data. Update the app on the device. As an optional step that can be done at any point in the form development, you can create a release and update the tablet application by using the Check for Updates link","title":"Tangerine User Guide"},{"location":"user-guide/#tangerine-user-guide","text":"","title":"Tangerine User Guide"},{"location":"user-guide/#application-design","text":"Please use only the Chrome browser for any of the user guide sections Tangerine Administration Tangerine form development Tangerine group management and releases Tangerine data collection The Tangerine form development process and release is as follows: Create a group. Develop your forms in this group (form rendering). Test your forms and adjust where necessary. Create a release - this generates a Chrome web install or a APK install. Install the app onto a device. Register the device user (each device has independent set of users). Conduct your data collection on the device. Synchronize the results from the device to the server. NOTE: this is done only manually Download the csv from the server to analyse the data. Update the app on the device. As an optional step that can be done at any point in the form development, you can create a release and update the tablet application by using the Check for Updates link","title":"Application design"},{"location":"user-guide/CreateNewForm/","text":"Creating a New Instrument/Form \u00b6 Prerequisite: Existing group or create a new Group After creating a group or opening an existing one, you will be presented with various options. The first action that you may wish to take is to create a new Form From the main menu options, select Author and then click Forms. This will bring up a listing of all forms for this group. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in on the tablet, after they create their user login details. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon to create a new form. A new form with a default name is created and a default section is placed into this form. To change the form's name, type in the new text and click Save. Form Actions \u00b6 Beside each of the forms you will see some action available. From here you can Edit, Print, Copy, Delete, or Archive a form. We recommend that you archive your forms instead of removing them. This will ensure that you can export the data of a form that is no longer in use. Click on the pen icon to modify the form. Each form contains a number of sections that represent your form's pages Click on the print icon to open a new printable menu where you can select two of the print details. This printable view we often use to quality assure (QA) the instrument or to get a list of variables and their definition. You can also use the print screen to save paper copy of your form. Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. Click on the trash icon to delete this form. Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page If a form is archived, click the un-archive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor.","title":"CreateNewForm"},{"location":"user-guide/CreateNewForm/#creating-a-new-instrumentform","text":"Prerequisite: Existing group or create a new Group After creating a group or opening an existing one, you will be presented with various options. The first action that you may wish to take is to create a new Form From the main menu options, select Author and then click Forms. This will bring up a listing of all forms for this group. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in on the tablet, after they create their user login details. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon to create a new form. A new form with a default name is created and a default section is placed into this form. To change the form's name, type in the new text and click Save.","title":"Creating a New Instrument/Form"},{"location":"user-guide/CreateNewForm/#form-actions","text":"Beside each of the forms you will see some action available. From here you can Edit, Print, Copy, Delete, or Archive a form. We recommend that you archive your forms instead of removing them. This will ensure that you can export the data of a form that is no longer in use. Click on the pen icon to modify the form. Each form contains a number of sections that represent your form's pages Click on the print icon to open a new printable menu where you can select two of the print details. This printable view we often use to quality assure (QA) the instrument or to get a list of variables and their definition. You can also use the print screen to save paper copy of your form. Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. Click on the trash icon to delete this form. Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page If a form is archived, click the un-archive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor.","title":"Form Actions"},{"location":"user-guide/HTMLEditor/","text":"The Instrument/Form HTML Editor \u00b6 The Form HTML Editor provides a high-level interface to the form creation or modification of an entire instrument or form. We suggest avoiding this interface unless familiar with JavaScript, CSS and HTML5. This view allows direct editing of instrument properties for advanced users. Here you see the structure of a form in Tangerine. From this advanced view you can modify any element on the form. Change any of the form or section events: on-open, on-change, on-submit Change any of the form elements, or quick copy paste them. Copy an entire form's content for safekeeping. Change a section ID Copy a form from one Tangerine instance to another. Here you must change the form id to match that of the destination form id Things to keep in mind if you decide to modify your forms directly from here: Never use double quotes in event logic. Never use double quotes in validation or skip logic rules Always create a copy of the form before you start editing","title":"HTMLEditor"},{"location":"user-guide/HTMLEditor/#the-instrumentform-html-editor","text":"The Form HTML Editor provides a high-level interface to the form creation or modification of an entire instrument or form. We suggest avoiding this interface unless familiar with JavaScript, CSS and HTML5. This view allows direct editing of instrument properties for advanced users. Here you see the structure of a form in Tangerine. From this advanced view you can modify any element on the form. Change any of the form or section events: on-open, on-change, on-submit Change any of the form elements, or quick copy paste them. Copy an entire form's content for safekeeping. Change a section ID Copy a form from one Tangerine instance to another. Here you must change the form id to match that of the destination form id Things to keep in mind if you decide to modify your forms directly from here: Never use double quotes in event logic. Never use double quotes in validation or skip logic rules Always create a copy of the form before you start editing","title":"The Instrument/Form HTML Editor"},{"location":"user-guide/addingSectionsAndQuestions/","text":"Adding Sections to an Instrument/Form \u00b6 To add a new section to your instrument, hit \"ADD SECTION\". The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screens that will be shown on the tablet when the tablet user is filling in the form. Section Editor \u00b6 Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. If this is a new section, you might give it a new name from the section header. Click the pen icon on the right of the blue bar and overwrite the \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits. SECTION OPTIONS Each one of the sections has some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one , and if you have coded some summary /feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only . Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work . Only one correct option per question can be defined. To add an item to your instrument section, click This opens the item type selection interface. These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc): Inputs INPUT-DATE: This item type renders a calendar widget on the tablet INPUT-TEXT: This item type is a standard numbers and letters field INPUT-TIME: This item type displays a clock hour selection on the tablet INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here Location GPS: This item type automatically collects GPS coordinates of the tablet LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. Lists CHECKBOX: This item type allows for multiple answers to be selected from a list of options CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options DROPDOWN (select): This item type allows for a single answer selection for longer lists RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options Misc IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section SIGNATURE: this input type allows you to capture a signature by the assessor. HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor.","title":"addingSectionsAndQuestions"},{"location":"user-guide/addingSectionsAndQuestions/#adding-sections-to-an-instrumentform","text":"To add a new section to your instrument, hit \"ADD SECTION\". The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screens that will be shown on the tablet when the tablet user is filling in the form.","title":"Adding Sections to an Instrument/Form"},{"location":"user-guide/addingSectionsAndQuestions/#section-editor","text":"Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. If this is a new section, you might give it a new name from the section header. Click the pen icon on the right of the blue bar and overwrite the \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits. SECTION OPTIONS Each one of the sections has some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one , and if you have coded some summary /feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only . Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work . Only one correct option per question can be defined. To add an item to your instrument section, click This opens the item type selection interface. These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc): Inputs INPUT-DATE: This item type renders a calendar widget on the tablet INPUT-TEXT: This item type is a standard numbers and letters field INPUT-TIME: This item type displays a clock hour selection on the tablet INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here Location GPS: This item type automatically collects GPS coordinates of the tablet LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. Lists CHECKBOX: This item type allows for multiple answers to be selected from a list of options CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options DROPDOWN (select): This item type allows for a single answer selection for longer lists RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options Misc IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section SIGNATURE: this input type allows you to capture a signature by the assessor. HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor.","title":"Section Editor"},{"location":"user-guide/admin/","text":"Create a new Group Roles Users Devices","title":"Admin"},{"location":"user-guide/createNewGroup/","text":"Creating a New Group \u00b6 Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. On the main group listing page, click \" + \" button in the bottom right corner to create a new group Enter a name for your group and click Submit WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, or run Tangerine on your own server, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com Any Admin user can create a new group unless configured for the user1 account only","title":"createNewGroup"},{"location":"user-guide/createNewGroup/#creating-a-new-group","text":"Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. On the main group listing page, click \" + \" button in the bottom right corner to create a new group Enter a name for your group and click Submit WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, or run Tangerine on your own server, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com Any Admin user can create a new group unless configured for the user1 account only","title":"Creating a New Group"},{"location":"user-guide/csv/","text":"Download CSV \u00b6 As mentioned earlier, on the group's main page listing the instruments/forms for the group, Tangerine provides a download CSV function on the main Tangerine editor page. Click the download icon to see the interface below. From here, you can select the results for a specific month or year of data collection. NOTE : To be able to download all the data select the * on both Month and Year and click the SUBMIT button. If the CSV generation was successful, the following screen will present the group name, Form id , Start time and progress of the CSV download. Once the CSV has been created, you can find it in your Downloads folder.","title":"Csv"},{"location":"user-guide/csv/#download-csv","text":"As mentioned earlier, on the group's main page listing the instruments/forms for the group, Tangerine provides a download CSV function on the main Tangerine editor page. Click the download icon to see the interface below. From here, you can select the results for a specific month or year of data collection. NOTE : To be able to download all the data select the * on both Month and Year and click the SUBMIT button. If the CSV generation was successful, the following screen will present the group name, Form id , Start time and progress of the CSV download. Once the CSV has been created, you can find it in your Downloads folder.","title":"Download CSV"},{"location":"user-guide/dataCollection/","text":"Data collection on Device \u00b6 Select the instrument to use, and follow the prompts, sections, and items on the screen, as generated in the instrument/form editor. To select an answer option, just tab on it. NOTE : Different to all other inputs, where the user/assessor selects the applicable / correct response which will then be marked in blue, in grids, the user has to select all INCORRECT items (they will turn blue). Resuming Instrument \u00b6 Should an administration be interrupted, or to be completed at a later stage, navigate to \" Visits \" on the top of the tablet screen. NOTE : You have to have a location section and location list loaded for your instrument to be able to access the resume feature in Tangerine. Make up a location list, even if it only has one column header entry and one item underneath (e.g. column A header is \"site\", row 2 entry is \"test site\". Without a location list loaded, you will not have a \"Visits\" tab on the tablet from which to resume the instrument. Select the appropriate location and date (as applicable) from the menu. Tangerine will automatically return the user to the last, incomplete section/page of the instrument. You can return from the \"Visits\" page to the main screen by hitting the Tangerine icon. Syncing Data \u00b6 Whenever possible during data collection, recommend that users / assessors to sync their data to the tablet by navigating to the profile menu, and select \" Sync \". The Sync screen provides an overview of the data upload/sync status to date, including the number of responses not yet uploaded as shown below. Once the sync is complete, Tangerine will show \" 100% \" for the field \" Percentage uploaded \".","title":"dataCollection"},{"location":"user-guide/dataCollection/#data-collection-on-device","text":"Select the instrument to use, and follow the prompts, sections, and items on the screen, as generated in the instrument/form editor. To select an answer option, just tab on it. NOTE : Different to all other inputs, where the user/assessor selects the applicable / correct response which will then be marked in blue, in grids, the user has to select all INCORRECT items (they will turn blue).","title":"Data collection on Device"},{"location":"user-guide/dataCollection/#resuming-instrument","text":"Should an administration be interrupted, or to be completed at a later stage, navigate to \" Visits \" on the top of the tablet screen. NOTE : You have to have a location section and location list loaded for your instrument to be able to access the resume feature in Tangerine. Make up a location list, even if it only has one column header entry and one item underneath (e.g. column A header is \"site\", row 2 entry is \"test site\". Without a location list loaded, you will not have a \"Visits\" tab on the tablet from which to resume the instrument. Select the appropriate location and date (as applicable) from the menu. Tangerine will automatically return the user to the last, incomplete section/page of the instrument. You can return from the \"Visits\" page to the main screen by hitting the Tangerine icon.","title":"Resuming Instrument"},{"location":"user-guide/dataCollection/#syncing-data","text":"Whenever possible during data collection, recommend that users / assessors to sync their data to the tablet by navigating to the profile menu, and select \" Sync \". The Sync screen provides an overview of the data upload/sync status to date, including the number of responses not yet uploaded as shown below. Once the sync is complete, Tangerine will show \" 100% \" for the field \" Percentage uploaded \".","title":"Syncing Data"},{"location":"user-guide/deployment/","text":"Deploying Tangerine for Offline (or Online) Data Collection \u00b6 Once the user is done creating the instruments/forms the next step is to deploy the instrument to an Android device for data collection. To release your instruments or instrument updates, select the \"Release\" tab in the top menu of the main group page. Upon selecting \"Release\", you will see the screen below. Tangerine offers two deployment types, test release and live release: Test Release -- This release option (\"release to QA\") is recommended for testing the instruments. When you make changes and updates to the instruments and release your changes as \"Test Release\", tablets that have the \"real\" version of Tangerine installed will NOT receive this update. HOWEVER, any data synced from the tablet devices even in a \"Test Release\" deployment goes into the main database (thus mark your tests clearly as \"TESTS\" to facilitate data cleaning. Live Release -- When instruments/forms are final, or instrument edits have been tested, use this release option (\"release to production\"). In this case, tablets that are already collecting data, or have the group's apk installed, will received an update request when connecting to the Internet the next time. All data collected from this release will also be added to the main database. Tangerine also offers two deployment /installation strategies, Android installation or web browser installation: Android Installation . This is the standard deployment package where an actual apk file can be generated on the computer, downloaded, and then copied over to a mobile device via a USB cable and installed. This method of deployment is suitable in slow network environment or when the apk is large. Web Browser Installation . This deployment strategy requires an Internet connection on the tablet for the Tangerine to be installed. Once installed, the app can work again offline. This method is suitable in places of good connectivity. NOTE : We recommend thoroughly testing your instruments and its data output before releasing them! Android Installation \u00b6 This deployment strategy creates an APK file which can be installed on an Android tablet or smartphone. Click on Android Installation Test Release/Live Release as shown in the screen above. Wait. Once Tangerine has compiled the apk, click on \"Download your APK here\", as shown below. This will download an apk file into your computer's downloads folder. NOTE: Every time an instrument/form is changed, added, or deleted from the group, it is necessary to create a release and alert each tablet user to use the \"Check for Update\" option in order to update their application. Web Browser Installation \u00b6 This deployment strategy creates a link/URL to a \"progressive web app\" (PWA) for direct installation from the web to the Android tablet or smartphone. Click on Web Browser Installation Test Release/Live Release. Wait. Once Tangerine has compiled the PWA, it will show an installation URL like in the screen below. Use this URL from the Chrome browser on the tablet to install the PWA on the tablet devices. You can also copy the URL and open a new browser tab with this URL on your computer to test your instruments online. The browser window may require you to confirm that you want to apply the updates. After \" Click here to proceed \", Tangerine will show an online data collection version of your instruments with a similar look and function as on a tablet/smartphone. NOTE : Every time an instrument/form is changed, added, or deleted from the group, it is necessary to release the apk/pwa again, but NO NEW INSTALLATION is necessary on the tablets. Instead, instruct Tangerine tablet users to connect their tablets, select their profile page (3 vertical white dots on top right of tablet screen). Select \" Check for Update \" and proceed to install the update. NOTE: This update approach will not only apply any instrument/form edits, new forms, or form deletions, but also any updates to the Tangerine application made in the meantime and applied to your group (if any).","title":"Deployment"},{"location":"user-guide/deployment/#deploying-tangerine-for-offline-or-online-data-collection","text":"Once the user is done creating the instruments/forms the next step is to deploy the instrument to an Android device for data collection. To release your instruments or instrument updates, select the \"Release\" tab in the top menu of the main group page. Upon selecting \"Release\", you will see the screen below. Tangerine offers two deployment types, test release and live release: Test Release -- This release option (\"release to QA\") is recommended for testing the instruments. When you make changes and updates to the instruments and release your changes as \"Test Release\", tablets that have the \"real\" version of Tangerine installed will NOT receive this update. HOWEVER, any data synced from the tablet devices even in a \"Test Release\" deployment goes into the main database (thus mark your tests clearly as \"TESTS\" to facilitate data cleaning. Live Release -- When instruments/forms are final, or instrument edits have been tested, use this release option (\"release to production\"). In this case, tablets that are already collecting data, or have the group's apk installed, will received an update request when connecting to the Internet the next time. All data collected from this release will also be added to the main database. Tangerine also offers two deployment /installation strategies, Android installation or web browser installation: Android Installation . This is the standard deployment package where an actual apk file can be generated on the computer, downloaded, and then copied over to a mobile device via a USB cable and installed. This method of deployment is suitable in slow network environment or when the apk is large. Web Browser Installation . This deployment strategy requires an Internet connection on the tablet for the Tangerine to be installed. Once installed, the app can work again offline. This method is suitable in places of good connectivity. NOTE : We recommend thoroughly testing your instruments and its data output before releasing them!","title":"Deploying Tangerine for Offline (or Online) Data Collection"},{"location":"user-guide/deployment/#android-installation","text":"This deployment strategy creates an APK file which can be installed on an Android tablet or smartphone. Click on Android Installation Test Release/Live Release as shown in the screen above. Wait. Once Tangerine has compiled the apk, click on \"Download your APK here\", as shown below. This will download an apk file into your computer's downloads folder. NOTE: Every time an instrument/form is changed, added, or deleted from the group, it is necessary to create a release and alert each tablet user to use the \"Check for Update\" option in order to update their application.","title":"Android Installation"},{"location":"user-guide/deployment/#web-browser-installation","text":"This deployment strategy creates a link/URL to a \"progressive web app\" (PWA) for direct installation from the web to the Android tablet or smartphone. Click on Web Browser Installation Test Release/Live Release. Wait. Once Tangerine has compiled the PWA, it will show an installation URL like in the screen below. Use this URL from the Chrome browser on the tablet to install the PWA on the tablet devices. You can also copy the URL and open a new browser tab with this URL on your computer to test your instruments online. The browser window may require you to confirm that you want to apply the updates. After \" Click here to proceed \", Tangerine will show an online data collection version of your instruments with a similar look and function as on a tablet/smartphone. NOTE : Every time an instrument/form is changed, added, or deleted from the group, it is necessary to release the apk/pwa again, but NO NEW INSTALLATION is necessary on the tablets. Instead, instruct Tangerine tablet users to connect their tablets, select their profile page (3 vertical white dots on top right of tablet screen). Select \" Check for Update \" and proceed to install the update. NOTE: This update approach will not only apply any instrument/form edits, new forms, or form deletions, but also any updates to the Tangerine application made in the meantime and applied to your group (if any).","title":"Web Browser Installation"},{"location":"user-guide/editInstrument/","text":"Editing Instrument Sections \u00b6 Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - Clicking this button shows you the HTML code behind the form. Please edit the HTML with care. PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. For each section there are two actions available. - EDIT -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE -- This icon deletes this instrument section In this view, you can drag sections to reorder them.","title":"editInstrument"},{"location":"user-guide/editInstrument/#editing-instrument-sections","text":"Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - Clicking this button shows you the HTML code behind the form. Please edit the HTML with care. PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. For each section there are two actions available. - EDIT -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE -- This icon deletes this instrument section In this view, you can drag sections to reorder them.","title":"Editing Instrument Sections"},{"location":"user-guide/formDevelopment/","text":"Create a new form Edit instrument description Adding sections and questions Input types Skip Logic Validation","title":"formDevelopment"},{"location":"user-guide/groupMangement/","text":"Deployment (Release updates) Obtaining your data - CSV","title":"groupMangement"},{"location":"user-guide/hackingTangerine/","text":"In this appendix we will show you how to do certain things that require more technical knowledge or experience with Tangerine Adding an auto-generated ID \u00b6 An autogenerated student or teacher ID is something that you may need to add to each one of your instruments. In the example here I will show you how to add an ID field that is already populated upon opening the page. Here are the steps to set this up: Create an input field of type TEXT and type in 'student_id' as its name. Mark this field as required and click save. Copy and paste the code that I have before into the on-open section logic Go the section where you'd like to add a student id. This new field doesn't have to be in a separate section and can be part of the Student Information page. Click the Insert Here button, to add a new input, and select TEXT under the first Inputs column. On the next page under name type in student_id Add a label and any other information you'd like for this field and save it. Now click the Edit icon on the top left of the section header Click the 'on-open' text link to edit it and paste the below code inside the field: function makeid() { var text = \\'\\'; var possible = \\'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnpqrstuvwxyz0123456789\\'; //change 6 to the desired length of the ID for (var i = 0; i \\<= 6; i++) text += possible.charAt(Math.floor(Math.random() * possible.length)); return text; } //If your variable is not called student_id change it in both occurances below if (inputs.student_id.value == \\'\\') inputs.student_id.value = makeid() You should see something like this on your screens Click the Submit button to save the change. If you deploy this form now you will see that upon opening this section the ID is generated and already inserted into the student_id variable. You can use this file to help you generated the code that you need: http://bit.ly/2JBk2P3 Changing the label of an input \u00b6 In some situations, you may wish to change the label of an input as to give different instruction or to add a variable name to it (like some calculation or the result of a previous selection). You can easily do this by following the below steps Add the question that you wish to change Add code and/or calculations to change the label in the on-open event of a section Let's first add question with variable name Q_10. Now, let's assume that you want to change the label for this question based on some calculation, and we want to add the result of the calculation to the label. Go to the on-open event on the section containing Q_10. Add the below code and click Submit: var calc = getValue(\\'teachers_present\\')/getValue(\\'teachers_enrolled\\') inputs.Q_10.label = \\'The teacher ratio is#\\' + calc + \\' Please keep this in mind when answering the below question.\\' What am I doing above? First I calculate some ration of teachers present vs teacher enrolled, which I've collected on a previous form. Then I make this ratio part of the label for questions Q_10. If you'd like to only assign a certain label without calculating anything you can do this: inputs.Q_10.label = \\'Previously you responded that there are #\\' + getValue(\\'teachers_present\\') + \\' teachers present. How many of them were prepared for class?\\' Filter the location list based on the user profile's location \u00b6 Let's assume that you have a location list with levels Region, District, and School. Now let's also assume that on the user profile page, you have added a location input with levels Region and District. You have also asked each assessor to select their district on the user profile page, after they have logged in. Your user profile page looks like so: Note above how the levels defined for this location input are Region and District. On the actual assessment form your location levels include the full hierarchy, for example, Region, District, and School. There is one more option that I want to check here which is \"Filter by locations in the user profile\" In the assessment form make sure that your data is like the example below: What will enabling the filter on the assessment form do? It will display only the district that this user has selected under their user profile. This makes the selection of a school much easier in a list with a lot of regions and districts. Let's see how it works on the tablet. When filling in my user profile I will select the 'Kilolo DC' district Now every time start a form containing a location input in it, I will only see the district that I selected on the user profile and no other regions or districts will be given to me for selection. By doing this, you ensure that the assessor will never select a school with the same name form a different district or make a selection that doesn't correspond to their actual location. Note how in the above screenshot, there is only one district showing up. Under the region selection we also see only the region that the Kilolo DC district belongs to. Appendix B \u00b6 In this appendix we will link some video tutorials and helper files that you can use to have a live example on how to do certain things with Tangerine How to create new users and add them to a group \u00b6 See how to create a user and add them to a group. https://youtu.be/_gYGC2_J2EU Importing a location list \u00b6 Make sure that the column names in your Excel exactly match the levels define in Tangerine (Including any capital letters) The part about importing metadata for your location is optional. You do not have to define metadata if such is not used in your scenario https://youtu.be/RSJmNu7ef3U Location list sample file with IDs \u00b6 In this file you will find out a sample location list with the IDs generated by Excel. You can use the formula for generating the Ids if your file does not contain such. http://bit.ly/2WzcTnB Defining a meta data template to present to the user upon selection \u00b6 If you do decide to use metadata, you need the part below in order to display some/all of it to the data assessor. If you are not displaying this information to the tablet user it will still end up in your CSV file. https://youtu.be/M83zFwtR-4A Adapt the line below to fit yoru metadata and level information so that this is printed to the assessor \\${node.level === \\' LEVEL_VARIABLE \\' ?` EMIS: \\${node. META_DATA_VARIABLE }`:\\'\\'} Replace the bold text with your corresponding level and meta data variable. Make sure you enable the metadata for the location input and paste this code as content. Add an 'Other, specify' field for a location list \u00b6 In this video we show you how you can add an 'Other' field for a location list. To help you generate the code we also use another helper file for this. https://youtu.be/obTQusAKeRM The helper file to generate the necessary code is located at http://bit.ly/2DLy3Xa Generate an Autogenerated ID field \u00b6 This helper file will help you generated the code for your autogenerated ID http://bit.ly/2JBk2P3 Automatically fill in the date and time fields in a section with the current date \u00b6 This helper file will help you generate the code required to automatically fill in the date and time fields located in the same section with the current date and time on the tablet. Hint: to prevent the user from changing these values you can mark the inputs as Disabled http://bit.ly/2PSJbZC Add a two variable tablet report \u00b6 You can make use of the helper file located at http://bit.ly/2Yi8PsF to generate the code for a two variable tablet report like in the image below. This report shows you the count of occurrence of the two variables per day Refer to the instructional video at https://youtu.be/ne5pZkWvjKY","title":"hackingTangerine"},{"location":"user-guide/hackingTangerine/#adding-an-auto-generated-id","text":"An autogenerated student or teacher ID is something that you may need to add to each one of your instruments. In the example here I will show you how to add an ID field that is already populated upon opening the page. Here are the steps to set this up: Create an input field of type TEXT and type in 'student_id' as its name. Mark this field as required and click save. Copy and paste the code that I have before into the on-open section logic Go the section where you'd like to add a student id. This new field doesn't have to be in a separate section and can be part of the Student Information page. Click the Insert Here button, to add a new input, and select TEXT under the first Inputs column. On the next page under name type in student_id Add a label and any other information you'd like for this field and save it. Now click the Edit icon on the top left of the section header Click the 'on-open' text link to edit it and paste the below code inside the field: function makeid() { var text = \\'\\'; var possible = \\'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnpqrstuvwxyz0123456789\\'; //change 6 to the desired length of the ID for (var i = 0; i \\<= 6; i++) text += possible.charAt(Math.floor(Math.random() * possible.length)); return text; } //If your variable is not called student_id change it in both occurances below if (inputs.student_id.value == \\'\\') inputs.student_id.value = makeid() You should see something like this on your screens Click the Submit button to save the change. If you deploy this form now you will see that upon opening this section the ID is generated and already inserted into the student_id variable. You can use this file to help you generated the code that you need: http://bit.ly/2JBk2P3","title":"Adding an auto-generated ID"},{"location":"user-guide/hackingTangerine/#changing-the-label-of-an-input","text":"In some situations, you may wish to change the label of an input as to give different instruction or to add a variable name to it (like some calculation or the result of a previous selection). You can easily do this by following the below steps Add the question that you wish to change Add code and/or calculations to change the label in the on-open event of a section Let's first add question with variable name Q_10. Now, let's assume that you want to change the label for this question based on some calculation, and we want to add the result of the calculation to the label. Go to the on-open event on the section containing Q_10. Add the below code and click Submit: var calc = getValue(\\'teachers_present\\')/getValue(\\'teachers_enrolled\\') inputs.Q_10.label = \\'The teacher ratio is#\\' + calc + \\' Please keep this in mind when answering the below question.\\' What am I doing above? First I calculate some ration of teachers present vs teacher enrolled, which I've collected on a previous form. Then I make this ratio part of the label for questions Q_10. If you'd like to only assign a certain label without calculating anything you can do this: inputs.Q_10.label = \\'Previously you responded that there are #\\' + getValue(\\'teachers_present\\') + \\' teachers present. How many of them were prepared for class?\\'","title":"Changing the label of an input"},{"location":"user-guide/hackingTangerine/#filter-the-location-list-based-on-the-user-profiles-location","text":"Let's assume that you have a location list with levels Region, District, and School. Now let's also assume that on the user profile page, you have added a location input with levels Region and District. You have also asked each assessor to select their district on the user profile page, after they have logged in. Your user profile page looks like so: Note above how the levels defined for this location input are Region and District. On the actual assessment form your location levels include the full hierarchy, for example, Region, District, and School. There is one more option that I want to check here which is \"Filter by locations in the user profile\" In the assessment form make sure that your data is like the example below: What will enabling the filter on the assessment form do? It will display only the district that this user has selected under their user profile. This makes the selection of a school much easier in a list with a lot of regions and districts. Let's see how it works on the tablet. When filling in my user profile I will select the 'Kilolo DC' district Now every time start a form containing a location input in it, I will only see the district that I selected on the user profile and no other regions or districts will be given to me for selection. By doing this, you ensure that the assessor will never select a school with the same name form a different district or make a selection that doesn't correspond to their actual location. Note how in the above screenshot, there is only one district showing up. Under the region selection we also see only the region that the Kilolo DC district belongs to.","title":"Filter the location list based on the user profile's location"},{"location":"user-guide/hackingTangerine/#appendix-b","text":"In this appendix we will link some video tutorials and helper files that you can use to have a live example on how to do certain things with Tangerine","title":"Appendix B"},{"location":"user-guide/hackingTangerine/#how-to-create-new-users-and-add-them-to-a-group","text":"See how to create a user and add them to a group. https://youtu.be/_gYGC2_J2EU","title":"How to create new users and add them to a group"},{"location":"user-guide/hackingTangerine/#importing-a-location-list","text":"Make sure that the column names in your Excel exactly match the levels define in Tangerine (Including any capital letters) The part about importing metadata for your location is optional. You do not have to define metadata if such is not used in your scenario https://youtu.be/RSJmNu7ef3U","title":"Importing a location list"},{"location":"user-guide/hackingTangerine/#location-list-sample-file-with-ids","text":"In this file you will find out a sample location list with the IDs generated by Excel. You can use the formula for generating the Ids if your file does not contain such. http://bit.ly/2WzcTnB","title":"Location list sample file with IDs"},{"location":"user-guide/hackingTangerine/#defining-a-meta-data-template-to-present-to-the-user-upon-selection","text":"If you do decide to use metadata, you need the part below in order to display some/all of it to the data assessor. If you are not displaying this information to the tablet user it will still end up in your CSV file. https://youtu.be/M83zFwtR-4A Adapt the line below to fit yoru metadata and level information so that this is printed to the assessor \\${node.level === \\' LEVEL_VARIABLE \\' ?` EMIS: \\${node. META_DATA_VARIABLE }`:\\'\\'} Replace the bold text with your corresponding level and meta data variable. Make sure you enable the metadata for the location input and paste this code as content.","title":"Defining a meta data template to present to the user upon selection"},{"location":"user-guide/hackingTangerine/#add-an-other-specify-field-for-a-location-list","text":"In this video we show you how you can add an 'Other' field for a location list. To help you generate the code we also use another helper file for this. https://youtu.be/obTQusAKeRM The helper file to generate the necessary code is located at http://bit.ly/2DLy3Xa","title":"Add an 'Other, specify' field for a location list"},{"location":"user-guide/hackingTangerine/#generate-an-autogenerated-id-field","text":"This helper file will help you generated the code for your autogenerated ID http://bit.ly/2JBk2P3","title":"Generate an Autogenerated ID field"},{"location":"user-guide/hackingTangerine/#automatically-fill-in-the-date-and-time-fields-in-a-section-with-the-current-date","text":"This helper file will help you generate the code required to automatically fill in the date and time fields located in the same section with the current date and time on the tablet. Hint: to prevent the user from changing these values you can mark the inputs as Disabled http://bit.ly/2PSJbZC","title":"Automatically fill in the date and time fields in a section with the current date"},{"location":"user-guide/hackingTangerine/#add-a-two-variable-tablet-report","text":"You can make use of the helper file located at http://bit.ly/2Yi8PsF to generate the code for a two variable tablet report like in the image below. This report shows you the count of occurrence of the two variables per day Refer to the instructional video at https://youtu.be/ne5pZkWvjKY","title":"Add a two variable tablet report"},{"location":"user-guide/inputTypes/","text":"Item Editor \u00b6 The item editor screen is similar for many of the item types. It usually contains the following elements: Variable name : This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label : This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number : If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text : This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if : This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled : Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet. GPS Item \u00b6 Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. The following might be a way to configure this item: Variable name : Enter \"gps\". Hint Text : Leave blank Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this: LOCATION \u00b6 This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this First, decide what levels you would like to show and prepare a CSV file that contains your locations and ids. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click Configure/Location Lists and add the desired levels using the '+' sign Click \"Create a New Location Level\". Enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. Next, click the Import tab and select \"Import CSV\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Download a sample location list file with IDs Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: Once you have successfully uploaded a location list and prepared Tangerine, you can add the location input item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: Download a sample location list file with IDs Variable name : Enter \"location\". Hint Text : Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Show meta-data: Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this: NOTE : Without a location list, no location will be displayed, and the item will be seen as \"loading\". CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns) \u00b6 This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: Variable name : Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text : Enter \"Tick all that apply\" Show if : Leave blank Valid if : Leave blank Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \" SUBMIT \". NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. On the tablet this single checkbox item will look like this: RADIO BUTTONS \u00b6 Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct . This is used in conjunction with the Threshold defined in the section header. When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this: DROPDOWN \u00b6 Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this: TIMED GRID \u00b6 This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name : Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text : Leave blank Auto Stop : The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space) : Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \" SUBMIT \". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this: . HTML CONTENT CONTAINER \u00b6 This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name : Enter \"Assessor instructions\". Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled : Leave blank Hidden : Leave blank Rows 1-X : Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. \\<br> for a line break; \\<b>text\\</b> for bolding a piece of text, etc.). When done adding all answer options, hit \" SUBMIT \". On the tablet this HTML container item will look like this: Copying Items \u00b6 If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT . Once the first step is complete, next you click on the icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs.","title":"inputTypes"},{"location":"user-guide/inputTypes/#item-editor","text":"The item editor screen is similar for many of the item types. It usually contains the following elements: Variable name : This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label : This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number : If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text : This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if : This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled : Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet.","title":"Item Editor"},{"location":"user-guide/inputTypes/#gps-item","text":"Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. The following might be a way to configure this item: Variable name : Enter \"gps\". Hint Text : Leave blank Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this:","title":"GPS Item"},{"location":"user-guide/inputTypes/#location","text":"This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this First, decide what levels you would like to show and prepare a CSV file that contains your locations and ids. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click Configure/Location Lists and add the desired levels using the '+' sign Click \"Create a New Location Level\". Enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. Next, click the Import tab and select \"Import CSV\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Download a sample location list file with IDs Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: Once you have successfully uploaded a location list and prepared Tangerine, you can add the location input item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: Download a sample location list file with IDs Variable name : Enter \"location\". Hint Text : Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Show meta-data: Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this: NOTE : Without a location list, no location will be displayed, and the item will be seen as \"loading\".","title":"LOCATION"},{"location":"user-guide/inputTypes/#checkbox-group-checkbox-radio-buttons-or-dropdowns","text":"This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: Variable name : Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text : Enter \"Tick all that apply\" Show if : Leave blank Valid if : Leave blank Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \" SUBMIT \". NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. On the tablet this single checkbox item will look like this:","title":"CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns)"},{"location":"user-guide/inputTypes/#radio-buttons","text":"Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct . This is used in conjunction with the Threshold defined in the section header. When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this:","title":"RADIO BUTTONS"},{"location":"user-guide/inputTypes/#dropdown","text":"Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this:","title":"DROPDOWN"},{"location":"user-guide/inputTypes/#timed-grid","text":"This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name : Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text : Leave blank Auto Stop : The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space) : Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \" SUBMIT \". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this: .","title":"TIMED GRID"},{"location":"user-guide/inputTypes/#html-content-container","text":"This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name : Enter \"Assessor instructions\". Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled : Leave blank Hidden : Leave blank Rows 1-X : Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. \\<br> for a line break; \\<b>text\\</b> for bolding a piece of text, etc.). When done adding all answer options, hit \" SUBMIT \". On the tablet this HTML container item will look like this:","title":"HTML CONTENT CONTAINER"},{"location":"user-guide/inputTypes/#copying-items","text":"If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT . Once the first step is complete, next you click on the icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs.","title":"Copying Items"},{"location":"user-guide/onDevice/","text":"Using Tangerine on the Mobile Device \u00b6 When using \"Android Installation\", install the Tangerine apk upon moving it onto the tablet device. Make sure you have selected \" Unknown sources \" under Settings > Security to allow installation of apps from sources other than the Play Store. When using the \"Web Browser Installation\" strategy, enter the PWA URL generated above into the URL field of the Chrome browser. Upon start of the download process, you will be prompted about \" Adding Tangerine to Home screen \". Confirm this with \"ADD\" on the next prompt. Close your browser and open Tangerine from your device's home screen or app drawer. Do not use the browser link anymore. Registration and Log in \u00b6 Have users register on the tablet. This is only required once for each user on a given tablet. Log in following registration. You should now see the main Tangerine screen with your group's instrument listed on the tablet. NOTE : Hitting the tangerine icon in the top left corner will return the user to Tangerine's home screen.","title":"onDevice"},{"location":"user-guide/onDevice/#using-tangerine-on-the-mobile-device","text":"When using \"Android Installation\", install the Tangerine apk upon moving it onto the tablet device. Make sure you have selected \" Unknown sources \" under Settings > Security to allow installation of apps from sources other than the Play Store. When using the \"Web Browser Installation\" strategy, enter the PWA URL generated above into the URL field of the Chrome browser. Upon start of the download process, you will be prompted about \" Adding Tangerine to Home screen \". Confirm this with \"ADD\" on the next prompt. Close your browser and open Tangerine from your device's home screen or app drawer. Do not use the browser link anymore.","title":"Using Tangerine on the Mobile Device"},{"location":"user-guide/onDevice/#registration-and-log-in","text":"Have users register on the tablet. This is only required once for each user on a given tablet. Log in following registration. You should now see the main Tangerine screen with your group's instrument listed on the tablet. NOTE : Hitting the tangerine icon in the top left corner will return the user to Tangerine's home screen.","title":"Registration and Log in"},{"location":"user-guide/skipLogic/","text":"On-Open / On-Change (Skip) Logic Editor \u00b6 Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item. There are two types of skip logic that can be applied: On form level - used to skip an entire section and implement logic that is applicable to the entire form On section/page level Most common case: You can implement those in the item's 'Skip If' field, or **Used for more coplex conditions**Implement the skip in the section's on-change logic The functions that we use for skip logic are: - getValue(' name ') - to check the value of input ' name ' - Use this for Text, Number, Dates, Time, Radio buttons, or Drop down lists - getValue(' name ').includes(' value ') - to check if ' value ' is in the selected items of ' name ' - Use this call to check if a value is in the list of selected values of a checkbox group input. - grid specific functions - look at the end of this page for more information. Join skip logic conditions using the && (AND) and || (OR) operators \u00b6 getValue(\\'repeatedgrade\\') == \\'1\\' && getValue(\\'age\\') >= 1 Negate a condition using the ! (NOT) operator \u00b6 getValue(\\'repeatedgrade\\') != \\'1\\' Or !getValue(\\'grades_taught\\').includes(\\'1\\') Logic at item level \u00b6 You want to skip an item question: Navigate to the \"Show if\" in the Item Editor. In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue(\\'repeatedgrade\\') == \\'1\\' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue(\\'q10\\') == \\'9\\' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue(\\'q12\\').includes(\\'5\\') \\ NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names \\', do NOT use single slanted quotation marks ' or double quotation marks \". Logic at instrument/form level \u00b6 At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. As outlined earlier, at the item level , such logic can be added in the \"Show if\" field in the item editor. On-open and on-change \u00b6 As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument. (Skip) Logic Examples \u00b6 You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. if(getValue(\\'children\\') == \\'1\\') {sectionEnable(\\'item_1\\')} else {sectionDisable(\\'item_1\\')} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if(getValue(\\'school\\') == \\'1\\') {itemShow(\\'grade\\') itemShow('repeatedgrade') itemShow('dropout')} else {itemHide(\\'grade\\') itemHide('repeatedgrade') itemHide('dropout')} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if(getValue(\\' teacher_available\\') === \\'1\\' && getValue(\\'class_selected\\') === \\'1\\' ) {itemShow(\\'teachers_name\\')} else {itemHide(\\'teachers_name\\')} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message. Logic at section level \u00b6 At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section). Skip logic with grid specific functions \u00b6 You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted(inputs.letter_sound) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems(inputs.letter_sound) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs.letter_sound.gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute(inputs.letter_sound) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page.","title":"skipLogic"},{"location":"user-guide/skipLogic/#on-open-on-change-skip-logic-editor","text":"Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item. There are two types of skip logic that can be applied: On form level - used to skip an entire section and implement logic that is applicable to the entire form On section/page level Most common case: You can implement those in the item's 'Skip If' field, or **Used for more coplex conditions**Implement the skip in the section's on-change logic The functions that we use for skip logic are: - getValue(' name ') - to check the value of input ' name ' - Use this for Text, Number, Dates, Time, Radio buttons, or Drop down lists - getValue(' name ').includes(' value ') - to check if ' value ' is in the selected items of ' name ' - Use this call to check if a value is in the list of selected values of a checkbox group input. - grid specific functions - look at the end of this page for more information.","title":"On-Open / On-Change (Skip) Logic Editor"},{"location":"user-guide/skipLogic/#join-skip-logic-conditions-using-the-and-and-or-operators","text":"getValue(\\'repeatedgrade\\') == \\'1\\' && getValue(\\'age\\') >= 1","title":"Join skip logic conditions using the &amp;&amp; (AND) and || (OR) operators"},{"location":"user-guide/skipLogic/#negate-a-condition-using-the-not-operator","text":"getValue(\\'repeatedgrade\\') != \\'1\\' Or !getValue(\\'grades_taught\\').includes(\\'1\\')","title":"Negate a condition using the ! (NOT) operator"},{"location":"user-guide/skipLogic/#logic-at-item-level","text":"You want to skip an item question: Navigate to the \"Show if\" in the Item Editor. In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue(\\'repeatedgrade\\') == \\'1\\' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue(\\'q10\\') == \\'9\\' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue(\\'q12\\').includes(\\'5\\') \\ NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names \\', do NOT use single slanted quotation marks ' or double quotation marks \".","title":"Logic at item level"},{"location":"user-guide/skipLogic/#logic-at-instrumentform-level","text":"At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. As outlined earlier, at the item level , such logic can be added in the \"Show if\" field in the item editor.","title":"Logic at instrument/form level"},{"location":"user-guide/skipLogic/#on-open-and-on-change","text":"As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument.","title":"On-open and on-change"},{"location":"user-guide/skipLogic/#skip-logic-examples","text":"You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. if(getValue(\\'children\\') == \\'1\\') {sectionEnable(\\'item_1\\')} else {sectionDisable(\\'item_1\\')} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if(getValue(\\'school\\') == \\'1\\') {itemShow(\\'grade\\') itemShow('repeatedgrade') itemShow('dropout')} else {itemHide(\\'grade\\') itemHide('repeatedgrade') itemHide('dropout')} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if(getValue(\\' teacher_available\\') === \\'1\\' && getValue(\\'class_selected\\') === \\'1\\' ) {itemShow(\\'teachers_name\\')} else {itemHide(\\'teachers_name\\')} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message.","title":"(Skip) Logic Examples"},{"location":"user-guide/skipLogic/#logic-at-section-level","text":"At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section).","title":"Logic at section level"},{"location":"user-guide/skipLogic/#skip-logic-with-grid-specific-functions","text":"You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted(inputs.letter_sound) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems(inputs.letter_sound) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs.letter_sound.gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute(inputs.letter_sound) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page.","title":"Skip logic with grid specific functions"},{"location":"user-guide/userGuide/","text":"{width=\"4.836162510936133in\" height=\"3.1752580927384075in\"} Creating and Editing Instruments in Tangerine: User Manual 4 Dec 2019 About Tangerine TM \u00b6 Tangerine is open source electronic data collection software designed for use on Android mobile devices. Its primary use is to enable recording of students' responses in oral early grade reading and mathematics skills assessments. Tangerine is also used to capture interview responses from students, teachers, and principals; as well as in simple surveys and other data collections. Tangerine was developed by RTI International with funding from RTI and Google.org. For more information on Tangerine, visit http://www.tangerinecentral.org . About this Manual \u00b6 The procedures outlined in this document assume that the user has a valid Tangerine editor username and password and is able to login to their Tangerine instance on the web. If you do not have a Tangerine instance or have any questions about Tangerine, please contact support\\@tangerinehelp.zendesk.com. This manual outlines the critical steps from creating an instrument in Tangerine to downloading the collected data for analysis. It provides tips and recommendations for instrument rendering in Tangerine and software use. Table of Contents \u00b6 About Tangerine TM 2 About this Manual 2 Table of Contents 3 1. Creating a New Group 5 2. Creating a New Instrument/Form 6 3. Editing Instrument Sections 7 Adding Sections to an Instrument/Form 8 Section Editor 8 Copying Items 12 4. Item Editor 12 GPS Item 13 LOCATION 15 CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns) 18 RADIO BUTTONS 20 DROPDOWN 21 TIMED GRID 21 HTML CONTENT CONTAINER 23 5. On-Open / On-Change (Skip) Logic Editor 25 Logic at instrument/form level 25 Logic at section level 25 Logic at item level 26 On-open and on-change 26 (Skip) Logic Examples 26 Skip logic with grid specific functions 28 6. Field Validation 29 Field Validation Examples 29 7. The Instrument/Form HTML Editor 31 8. Deploying Tangerine for Offline (or Online) Data Collection 32 Android Installation 33 Web Browser Installation 33 9. Download CSV 35 10. Using Tangerine on the Mobile Device 37 Registration and Log in 37 Administrating Instruments 39 Resuming Instrument 40 Syncing Data 41 Appendix A 43 Adding an auto-generated ID 43 Changing the label of an input 44 Filter the location list based on the user profile's location 44 Appendix B 47 How to create new users and add them to a group 47 Importing a location list 47 Location list sample file with IDs 47 Defining a meta data template to present to the user upon selection 47 Add an 'Other, specify' field for a location list 47 Generate an Autogenerated ID field 47 Automatically fill in the date and time fields in a section with the current date 48 Add a two variable tablet report 48 Creating a New Group \u00b6 Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups and/or the opportunity to create new groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. Click \" Create New Group \" in the screen below. {width=\"1.5853652668416447in\" height=\"0.5145833333333333in\"} {width=\"6.263888888888889in\" height=\"1.9701388888888889in\"} Enter a name for your group: all lower case, no space, only letters. {width=\"6.263888888888889in\" height=\"2.379861111111111in\"} WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com Creating a New Instrument/Form \u00b6 When you create a group, it will show up in the list groups in your Tangerine instance. Click on the group name to start creating your instruments in Tangerine. When you create a new group, Tangerine automatically creates an example instrument/form. To add a form or instrument, click on the ADD FORM button. {width=\"6.5in\" height=\"4.054581146106736in\"} This will add an entry to the already existing list of forms but with a default name, 'New Form'. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in, after they create their user login details on the tablet. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon {width=\"0.2378543307086614in\" height=\"0.24700240594925635in\"} to create a new record for the form. This can be used for offline data entry. Be careful as this record is saved in the database even if you do not reach the Submit button. Click on the pen icon {width=\"0.2375in\" height=\"0.34146325459317584in\"}to modify the name of your instrument and to start adding/editing instrument sections and items. Click on the print icon {width=\"0.2554702537182852in\" height=\"0.36656714785651795in\"} to open a new printable menu where you can select two of the print details for each item in your instrument. This is the view we often use to quality assure (QA) the instrument or to get a list of variables and their definition {width=\"0.25972222222222224in\" height=\"0.2298611111111111in\"} Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. {width=\"0.25972222222222224in\" height=\"0.4097222222222222in\"}Click on the trash icon to delete this form. {width=\"0.25972222222222224in\" height=\"0.22036964129483816in\"}Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page {width=\"0.23434055118110236in\" height=\"0.22013888888888888in\"} If a form is archived, click the unarchive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor. {width=\"0.2798611111111111in\" height=\"0.3in\"} As you will see later, by clicking from this view, you can also access your data. To rename your instrument/form, click on the pen icon for the form, overwrite the \"New Form\" entry under \"Form Title\" and hit \"SAVE\". {width=\"6.5in\" height=\"1.1611111111111112in\"} Editing Instrument Sections \u00b6 Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. {width=\"6.5in\" height=\"1.6465277777777778in\"} The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - This converts the interface from a WYSIWYG (\"what you see is what you get\") to a HTML code interface PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. EDIT {width=\"0.20833333333333334in\" height=\"0.20238079615048118in\"} -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE {width=\"0.24434820647419073in\" height=\"0.2519838145231846in\"} -- This icon deletes this instrument section In this view, you can drag sections to reorder them. Adding Sections to an Instrument/Form \u00b6 To add a new section to your instrument, hit \"ADD SECTION\". {width=\"1.107674978127734in\" height=\"0.39807086614173226in\"} The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screen that will be shown on the tablet. Section Editor \u00b6 Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. {width=\"6.263888888888889in\" height=\"2.0in\"} If this is a new section, you might give it a section header. Click the pen icon on the right of the blue bar and overwrite the \"...\" under \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits. {width=\"6.263888888888889in\" height=\"2.14375in\"} SECTION OPTIONS Each one of the sections has a some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one , and if you have coded some summary /feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only . Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work . Only one correct option per question can be defined. {width=\"1.0373239282589677in\" height=\"0.36828083989501315in\"} To add an item to your instrument section, click This opens the item type selection interface. {width=\"6.263888888888889in\" height=\"1.4375in\"} These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc): Inputs INPUT-DATE: This item type renders a calendar widget on the tablet {width=\"2.0967749343832023in\" height=\"0.35526793525809275in\"} INPUT-TEXT: This item type is a standard numbers and letters field {width=\"2.013888888888889in\" height=\"0.4049584426946632in\"} INPUT-TIME: This item type displays a clock hour selection on the tablet {width=\"1.9444444444444444in\" height=\"0.4132228783902012in\"} INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here {width=\"2.361111111111111in\" height=\"0.43801727909011373in\"} Location GPS: This item type automatically collects GPS coordinates of the tablet {width=\"1.0138888888888888in\" height=\"0.36363735783027124in\"} LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. {width=\"1.625in\" height=\"0.4722222222222222in\"} Lists CHECKBOX: This item type allows for multiple answers to be selected from a list of options {width=\"1.7352241907261592in\" height=\"0.39645341207349083in\"} CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options {width=\"2.5in\" height=\"0.4722222222222222in\"} DROPDOWN (select): This item type allows for a single answer selection for longer lists {width=\"2.7777777777777777in\" height=\"0.4444444444444444in\"} RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options {width=\"2.1805555555555554in\" height=\"0.4722222222222222in\"} Misc IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section {width=\"1.2808989501312336in\" height=\"0.35810148731408575in\"} SIGNATURE: this input type allows you to capture a signature by the assessor. {width=\"1.441557305336833in\" height=\"0.36313976377952756in\"} HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. {width=\"3.361111111111111in\" height=\"0.4027777777777778in\"} QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). {width=\"2.736111111111111in\" height=\"0.4876038932633421in\"} EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). {width=\"1.7083333333333333in\" height=\"0.46281058617672793in\"} TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. {width=\"1.7222222222222223in\" height=\"0.4722222222222222in\"} UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. {width=\"2.2083333333333335in\" height=\"0.5138888888888888in\"} CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. {width=\"1.7916666666666667in\" height=\"0.4722222222222222in\"} Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor. Copying Items \u00b6 If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT . Once the first step is complete, next you click on the {width=\"0.34375in\" height=\"0.28125in\"} icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs. {width=\"6.40625in\" height=\"2.625in\"} Item Editor \u00b6 The item editor screen is similar for many of the item types. It usually contains the following elements: {width=\"5.463865923009624in\" height=\"4.081395450568679in\"} Variable name : This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label : This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number : If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text : This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if : This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled : Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet. GPS Item \u00b6 Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. {width=\"6.263888888888889in\" height=\"5.3902777777777775in\"} The following might be a way to configure this item: Variable name : Enter \"gps\". Hint Text : Leave blank Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. {width=\"6.263888888888889in\" height=\"0.85in\"} On the tablet this item will look like this: {width=\"6.263888888888889in\" height=\"1.3881944444444445in\"} LOCATION \u00b6 This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this, please go to Appendix B First, decide what levels you would like to show and prepare a CSV file that contains your locations accordingly. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click on the tab \"MANAGE LOCATION LIST LEVELS\" located at the top of your group's main page that lists your instruments/forms. {width=\"6.263888888888889in\" height=\"0.47244094488188976in\"} Click \"Create a New Location Level\". {width=\"6.5in\" height=\"1.1538003062117235in\"} On the next screen, enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. {width=\"6.5in\" height=\"2.667465004374453in\"} Next, navigate to the \"MANAGE LOCATION LIST CONTENT\" tab and select \"Import Location List\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. {width=\"6.5in\" height=\"3.136111111111111in\"} Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. {width=\"6.5in\" height=\"1.2909722222222222in\"} Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: {width=\"5.0236220472440944in\" height=\"0.9875492125984252in\"} Once you have successfully uploaded a location list and prepared Tangerine, you can add the location item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: http://bit.ly/2WzcTnB {width=\"4.427083333333333in\" height=\"4.485416666666667in\"} Variable name : Enter \"location\". Hint Text : Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Show meta-data: Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this: {width=\"4.479166666666667in\" height=\"0.3850404636920385in\"} {width=\"4.479338363954506in\" height=\"1.624760498687664in\"} NOTE : Without a location list, no location will be displayed, and the item will be seen as \"loading\". CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns) \u00b6 This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: {width=\"3.1875in\" height=\"3.7354166666666666in\"} Variable name : Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text : Enter \"Tick all that apply\" Show if : Leave blank Valid if : Leave blank Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" {width=\"3.1798611111111112in\" height=\"0.9777777777777777in\"} Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \" SUBMIT \". On the tablet this item will look like this: {width=\"4.908562992125984in\" height=\"2.1185181539807525in\"} NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. {width=\"4.8977012248468945in\" height=\"3.4148151793525807in\"} On the tablet this single checkbox item will look like this: {width=\"6.263888888888889in\" height=\"0.46729002624671917in\"} {width=\"6.263514873140857in\" height=\"0.3925240594925634in\"} RADIO BUTTONS \u00b6 Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct . This is used in conjunction with the Threshold defined in the section header. {width=\"2.8986111111111112in\" height=\"2.987800743657043in\"} When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this: {width=\"6.263888888888889in\" height=\"1.28125in\"} DROPDOWN \u00b6 Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this: {width=\"6.263888888888889in\" height=\"1.2756944444444445in\"} TIMED GRID \u00b6 This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name : Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text : Leave blank Auto Stop : The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. {width=\"4.808333333333334in\" height=\"5.261805555555555in\"} Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space) : Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \" SUBMIT \". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this: {width=\"4.25in\" height=\"3.78125in\"} . HTML CONTENT CONTAINER \u00b6 This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name : Enter \"Assessor instructions\". Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled : Leave blank Hidden : Leave blank Rows 1-X : Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. \\<br> for a line break; \\<b>text\\</b> for bolding a piece of text, etc.). When done adding all answer options, hit \" SUBMIT \". {width=\"4.5in\" height=\"4.15in\"} On the tablet this HTML container item will look like this: {width=\"3.5395833333333333in\" height=\"4.262505468066491in\"} On-Open / On-Change (Skip) Logic Editor \u00b6 Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item. Logic at instrument/form level \u00b6 At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. {width=\"6.5in\" height=\"1.5645833333333334in\"} Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. {width=\"6.263888888888889in\" height=\"1.58125in\"} Logic at section level \u00b6 At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section). {width=\"6.263888888888889in\" height=\"2.1243055555555554in\"} Logic at item level \u00b6 As outlined earlier, at the item level , such logic can be added in the \"Show if\" field in the item editor. {width=\"6.263888888888889in\" height=\"0.9034722222222222in\"} On-open and on-change \u00b6 {width=\"5.11in\" height=\"3.83in\"}As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument. (Skip) Logic Examples \u00b6 You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. {width=\"6.5in\" height=\"0.7222222222222222in\"} if(getValue(\\'children\\') == \\'1\\') {sectionEnable(\\'item_1\\')} else {sectionDisable(\\'item_1\\')} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if(getValue(\\'school\\') == \\'1\\') {itemShow(\\'grade\\') itemShow('repeatedgrade') itemShow('dropout')} else {itemHide(\\'grade\\') itemHide('repeatedgrade') itemHide('dropout')} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if(getValue(\\' teacher_available\\') === \\'1\\' && getValue(\\'class_selected\\') === \\'1\\' ) {itemShow(\\'teachers_name\\')} else {itemHide(\\'teachers_name\\')} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message. {width=\"6.003898731408574in\" height=\"1.0694444444444444in\"} You want to skip an item: Navigate to the \"Show if\" in the Item Editor. {width=\"6.263888888888889in\" height=\"0.9034722222222222in\"} In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue(\\'repeatedgrade\\') == \\'1\\' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue(\\'q10\\') == \\'9\\' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue(\\'q12\\').includes(\\'5\\') \\ NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names \\', do NOT use single slanted quotation marks ' or double quotation marks \". Skip logic with grid specific functions \u00b6 You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted(inputs.letter_sound) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems(inputs.letter_sound) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs.letter_sound.gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute(inputs.letter_sound) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page. Field Validation \u00b6 Tangerine provides the option to check the validity of an input field. Navigate to the \" Valid if \" field in the Item Editor. Field Validation Examples \u00b6 If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input.value.length > 9 {width=\"5.450694444444444in\" height=\"2.7984667541557307in\"} Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt(input.value) \\<= inputs.boys_enrolled.value {width=\"5.45097987751531in\" height=\"2.7974037620297465in\"} If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input.value >= 0 && input.value \\<= 10 || input.value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 (!getValue(\\'TQ1\\').includes(\\'888\\') && !getValue(\\'TQ1\\').includes(\\'0\\')) || (getValue(\\'TQ1\\').includes(\\'888\\') || getValue(\\'TQ1\\').includes(\\'0\\')) && getValue(\\'TQ1\\').length == 1 The Instrument/Form HTML Editor \u00b6 The Form HTML Editor provides a high-level interface to the form creation or modification of an entire instrument or form. We suggest avoiding this interface unless familiar with JavaScript, CSS and HTML5. This view allows direct editing of instrument properties for advanced users. {width=\"6.263888888888889in\" height=\"5.166666666666667in\"} Deploying Tangerine for Offline (or Online) Data Collection \u00b6 Once the user is done creating the instruments/forms the next step is to deploy the instrument to an Android device for data collection. To release your instruments or instrument updates, select the \"Release\" tab in the top menu of the main group page. {width=\"6.263888888888889in\" height=\"2.104861111111111in\"} Upon selecting \"Release\", you will see the screen below. {width=\"6.263888888888889in\" height=\"1.7819444444444446in\"} Tangerine offers two deployment types, test release and live release: Test Release -- This release option (\"release to QA\") is recommended for testing the instruments. When you make changes and updates to the instruments and release your changes as \"Test Release\", tablets that have the \"real\" version of Tangerine installed will NOT receive this update. HOWEVER, any data synced from the tablet devices even in a \"Test Release\" deployment goes into the main database (thus mark your tests clearly as \"TESTS\" to facilitate data cleaning. Live Release -- When instruments/forms are final, or instrument edits have been tested, use this release option (\"release to production\"). In this case, tablets that are already collecting data, or have the group's apk installed, will received an update request when connecting to the Internet the next time. All data collected from this release will also be added to the main database. Tangerine also offers two deployment /installation strategies, Android installation or web browser installation: Android Installation . This is the standard deployment package where an actual apk file can be generated on the computer, downloaded, and then copied over to a mobile device via a USB cable and installed. This method of deployment is suitable in slow network environment or when the apk is large. Web Browser Installation . This deployment strategy requires an Internet connection on the tablet for the Tangerine to be installed. Once installed, the app can work again offline. This method is suitable in places of good connectivity. NOTE : We recommend thoroughly testing your instruments and its data output before releasing them! Android Installation \u00b6 This deployment strategy creates an APK file which can be installed on an Android tablet or smartphone. Click on Android Installation Test Release/Live Release as shown in the screen above. Wait. {width=\"6.263888888888889in\" height=\"0.6847222222222222in\"} Once Tangerine has compiled the apk, click on \"Download your APK here\", as shown below. This will download an apk file into your computer's downloads folder. {width=\"6.263888888888889in\" height=\"0.508928258967629in\"} NOTE: Every time an instrument/form is changed, added, or deleted from the group, it is necessary to create a release and alert each tablet user to use the \"Check for Update\" option in order to update their application. Web Browser Installation \u00b6 This deployment strategy creates a link/URL to a \"progressive web app\" (PWA) for direct installation from the web to the Android tablet or smartphone. Click on Web Browser Installation Test Release/Live Release. Wait. Once Tangerine has compiled the PWA, it will show an installation URL like in the screen below. {width=\"6.263888888888889in\" height=\"0.7569444444444444in\"} Use this URL from the Chrome browser on the tablet to install the PWA on the tablet devices. You can also copy the URL and open a new browser tab with this URL on your computer to test your instruments online. The browser window may require you to confirm that you want to apply the updates. {width=\"6.263888888888889in\" height=\"2.9854166666666666in\"} After \" Click here to proceed \", Tangerine will show an online data collection version of your instruments with a similar look and function as on a tablet/smartphone. {width=\"6.263888888888889in\" height=\"2.165277777777778in\"} {width=\"3.8993055555555554in\" height=\"2.464583333333333in\"} NOTE : Every time an instrument/form is changed, added, or deleted from the group, it is necessary to release the apk/pwa again, but NO NEW INSTALLATION is necessary on the tablets. Instead, instruct Tangerine tablet users to connect their tablets, select their profile page (3 vertical white dots on top right of tablet screen). Select \" Check for Update \" and proceed to install the update. {width=\"2.0555555555555554in\" height=\"2.4929571303587053in\"} NOTE: This update approach will not only apply any instrument/form edits, new forms, or form deletions, but also any updates to the Tangerine application made in the meantime and applied to your group (if any). Download CSV \u00b6 As mentioned earlier, on the group's main page listing the instruments/forms for the group, Tangerine provides a download CSV function on the main Tangerine editor page. {width=\"6.263888888888889in\" height=\"2.047222222222222in\"} Click the download icon {width=\"0.20402340332458443in\" height=\"0.21039916885389326in\"}to see the interface below. From here, you can select the results for a specific month or year of data collection. {width=\"6.263888888888889in\" height=\"1.8118055555555554in\"} NOTE : To be able to download all the data select the * on both Month and Year and click the SUBMIT button. If the CSV generation was successful, the following screen will present the group name, Form id , Start time and progress of the CSV download. {width=\"6.263888888888889in\" height=\"1.2673611111111112in\"} Once the CSV has been created, you can find it in your Downloads folder. 10. Using Tangerine on the Mobile Device \u00b6 {width=\"2.6166666666666667in\" height=\"4.18125in\"}When using \"Android Installation\", install the Tangerine apk upon moving it onto the tablet device. Make sure you have selected \" Unknown sources \" under Settings > Security to allow installation of apps from sources other than the Play Store. When using the \"Web Browser Installation\" strategy, enter the PWA URL generated above into the URL field of the Chrome browser. Upon start of the download process, you will be prompted about \" Adding Tangerine to Home screen \". Confirm this with \"ADD\" on the next prompt. Close your browser and open Tangerine from your device's home screen or app drawer. Do not use the browser link anymore. Registration and Log in \u00b6 Have users register on the tablet. This is only required once for each user on a given tablet. {width=\"2.1790551181102362in\" height=\"3.486487314085739in\"} Log in following registration. {width=\"2.9004844706911634in\" height=\"2.5479451006124236in\"} You should now see the main Tangerine screen with your group's instrument listed on the tablet. {width=\"2.6273687664041994in\" height=\"4.203790463692038in\"} NOTE : Hitting the tangerine icon in the top left corner will return the user to Tangerine's home screen. Administrating Instruments \u00b6 Select the instrument to use, and follow the prompts, sections, and items on the screen, as generated in the instrument/form editor. To select an answer option, just tab on it. NOTE : Different to all other inputs, where the user/assessor selects the applicable / correct response which will then be marked in blue, in grids, the user has to select all INCORRECT items (they will turn blue). {width=\"2.9583333333333335in\" height=\"4.739583333333333in\"} {width=\"2.96in\" height=\"4.74in\"} Resuming Instrument \u00b6 Should an administration be interrupted, or to be completed at a later stage, navigate to \" Visits \" on the top of the tablet screen. NOTE : You have to have a location section and location list loaded for your instrument to be able to access the resume feature in Tangerine. Make up a location list, even if it only has one column header entry and one item underneath (e.g. column A header is \"site\", row 2 entry is \"test site\". Without a location list loaded, you will not have a \"Visits\" tab on the tablet from which to resume the instrument. {width=\"3.451388888888889in\" height=\"3.0454549431321083in\"} Select the appropriate location and date (as applicable) from the menu. Tangerine will automatically return the user to the last, incomplete section/page of the instrument. {width=\"3.475693350831146in\" height=\"1.9696970691163604in\"} You can return from the \"Visits\" page to the main screen by hitting the Tangerine icon. {width=\"2.0590277777777777in\" height=\"2.2743055555555554in\"}Syncing Data \u00b6 Whenever possible during data collection, recommend that users / assessors to sync their data to the tablet by navigating to the profile menu, and select \" Sync \". The Sync screen provides an overview of the data upload/sync status to date, including the number of responses not yet uploaded as shown below. {width=\"3.518662510936133in\" height=\"3.1515146544181976in\"} Once the sync is complete, Tangerine will show \" 100% \" for the field \" Percentage uploaded \". {width=\"3.45in\" height=\"3.1515146544181976in\"} Appendix A \u00b6 In this appendix we will show you how to do certain things that require more technical knowledge or experience with Tangerine Adding an auto-generated ID \u00b6 An autogenerated student or teacher ID is something that you may need to add to each one of your instruments. In the example here I will show you how to add an ID field that is already populated upon opening the page. Here are the steps to set this up: Create an input field of type TEXT and type in 'student_id' as its name. Mark this field as required and click save. Copy and paste the code that I have before into the on-open section logic Go the section where you'd like to add a student id. This new field doesn't have to be in a separate section and can be part of the Student Information page. Click the Insert Here button, to add a new input, and select TEXT under the first Inputs column. On the next page under name type in student_id {width=\"4.9875in\" height=\"2.281674321959755in\"} Add a label and any other information you'd like for this field and save it. Now click the Edit icon on the top left of the section header Click the 'on-open' text link to edit it and paste the below code inside the field: function makeid() { var text = \\'\\'; var possible = \\'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnpqrstuvwxyz0123456789\\'; //change 6 to the desired length of the ID for (var i = 0; i \\<= 6; i++) text += possible.charAt(Math.floor(Math.random() * possible.length)); return text; } //If your variable is not called student_id change it in both occurances below if (inputs.student_id.value == \\'\\') inputs.student_id.value = makeid() You should see something like this on your screens {width=\"6.089588801399825in\" height=\"3.05in\"} Click the Submit button to save the change. If you deploy this form now you will see that upon opening this section the ID is generated and already inserted into the student_id variable. You can use this file to help you generated the code that you need: http://bit.ly/2JBk2P3 Changing the label of an input \u00b6 In some situations, you may wish to change the label of an input as to give different instruction or to add a variable name to it (like some calculation or the result of a previous selection). You can easily do this by following the below steps Add the question that you wish to change Add code and/or calculations to change the label in the on-open event of a section Let's first add question with variable name Q_10. Now, let's assume that you want to change the label for this question based on some calculation, and we want to add the result of the calculation to the label. Go to the on-open event on the section containing Q_10. Add the below code and click Submit: var calc = getValue(\\'teachers_present\\')/getValue(\\'teachers_enrolled\\') inputs.Q_10.label = \\'The teacher ratio is#\\' + calc + \\' Please keep this in mind when answering the below question.\\' What am I doing above? First I calculate some ration of teachers present vs teacher enrolled, which I've collected on a previous form. Then I make this ratio part of the label for questions Q_10. If you'd like to only assign a certain label without calculating anything you can do this: inputs.Q_10.label = \\'Previously you responded that there are #\\' + getValue(\\'teachers_present\\') + \\' teachers present. How many of them were prepared for class?\\' Filter the location list based on the user profile's location \u00b6 Let's assume that you have a location list with levels Region, District, and School. Now let's also assume that on the user profile page, you have added a location input with levels Region and District. You have also asked each assessor to select their district on the user profile page, after they have logged in. Your user profile page looks like so: {width=\"4.0625in\" height=\"3.3806419510061243in\"} Note above how the levels defined for this location input are Region and District. On the actual assessment form your location levels include the full hierarchy, for example, Region, District, and School. There is one more option that I want to check here which is \"Filter by locations in the user profile\" In the assessment form make sure that your data is like the example below: {width=\"4.071112204724409in\" height=\"1.8368339895013124in\"} What will enabling the filter on the assessment form do? It will display only the district that this user has selected under their user profile. This makes the selection of a school much easier in a list with a lot of regions and districts. Let's see how it works on the tablet. When filling in my user profile I will select the 'Kilolo DC' district {width=\"3.4875in\" height=\"4.340765529308836in\"} Now every time start a form containing a location input in it, I will only see the district that I selected on the user profile and no other regions or districts will be given to me for selection. By doing this, you ensure that the assessor will never select a school with the same name form a different district or make a selection that doesn't correspond to their actual location. {width=\"5.2in\" height=\"1.9103783902012248in\"} Note how in the above screenshot, there is only one district showing up. Under the region selection we also see only the region that the Kilolo DC district belongs to. Appendix B \u00b6 In this appendix we will link some video tutorials and helper files that you can use to have a live example on how to do certain things with Tangerine How to create new users and add them to a group \u00b6 See how to create a user and add them to a group. https://youtu.be/_gYGC2_J2EU Importing a location list \u00b6 Make sure that the column names in your Excel exactly match the levels define in Tangerine (Including any capital letters) The part about importing metadata for your location is optional. You do not have to define metadata if such is not used in your scenario https://youtu.be/RSJmNu7ef3U Location list sample file with IDs \u00b6 In this file you will find out a sample location list with the IDs generated by Excel. You can use the formula for generating the Ids if your file does not contain such. http://bit.ly/2WzcTnB Defining a meta data template to present to the user upon selection \u00b6 If you do decide to use metadata, you need the part below in order to display some/all of it to the data assessor. If you are not displaying this information to the tablet user it will still end up in your CSV file. https://youtu.be/M83zFwtR-4A Adapt the line below to fit yoru metadata and level information so that this is printed to the assessor \\${node.level === \\' LEVEL_VARIABLE \\' ?` EMIS: \\${node. META_DATA_VARIABLE }`:\\'\\'} Replace the bold text with your corresponding level and meta data variable. Make sure you enable the metadata for the location input and paste this code as content. Add an 'Other, specify' field for a location list \u00b6 In this video we show you how you can add an 'Other' field for a location list. To help you generate the code we also use another helper file for this. https://youtu.be/obTQusAKeRM The helper file to generate the necessary code is located at http://bit.ly/2DLy3Xa Generate an Autogenerated ID field \u00b6 This helper file will help you generated the code for your autogenerated ID http://bit.ly/2JBk2P3 Automatically fill in the date and time fields in a section with the current date \u00b6 This helper file will help you generate the code required to automatically fill in the date and time fields located in the same section with the current date and time on the tablet. Hint: to prevent the user from changing these values you can mark the inputs as Disabled http://bit.ly/2PSJbZC Add a two variable tablet report \u00b6 You can make use of the helper file located at http://bit.ly/2Yi8PsF to generate the code for a two variable tablet report like in the image below. This report shows you the count of occurrence of the two variables per day Refer to the instructional video at https://youtu.be/ne5pZkWvjKY {width=\"5.810126859142607in\" height=\"2.8633639545056866in\"}","title":"userGuide"},{"location":"user-guide/userGuide/#about-tangerinetm","text":"Tangerine is open source electronic data collection software designed for use on Android mobile devices. Its primary use is to enable recording of students' responses in oral early grade reading and mathematics skills assessments. Tangerine is also used to capture interview responses from students, teachers, and principals; as well as in simple surveys and other data collections. Tangerine was developed by RTI International with funding from RTI and Google.org. For more information on Tangerine, visit http://www.tangerinecentral.org .","title":"About TangerineTM"},{"location":"user-guide/userGuide/#about-this-manual","text":"The procedures outlined in this document assume that the user has a valid Tangerine editor username and password and is able to login to their Tangerine instance on the web. If you do not have a Tangerine instance or have any questions about Tangerine, please contact support\\@tangerinehelp.zendesk.com. This manual outlines the critical steps from creating an instrument in Tangerine to downloading the collected data for analysis. It provides tips and recommendations for instrument rendering in Tangerine and software use.","title":"About this Manual"},{"location":"user-guide/userGuide/#table-of-contents","text":"About Tangerine TM 2 About this Manual 2 Table of Contents 3 1. Creating a New Group 5 2. Creating a New Instrument/Form 6 3. Editing Instrument Sections 7 Adding Sections to an Instrument/Form 8 Section Editor 8 Copying Items 12 4. Item Editor 12 GPS Item 13 LOCATION 15 CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns) 18 RADIO BUTTONS 20 DROPDOWN 21 TIMED GRID 21 HTML CONTENT CONTAINER 23 5. On-Open / On-Change (Skip) Logic Editor 25 Logic at instrument/form level 25 Logic at section level 25 Logic at item level 26 On-open and on-change 26 (Skip) Logic Examples 26 Skip logic with grid specific functions 28 6. Field Validation 29 Field Validation Examples 29 7. The Instrument/Form HTML Editor 31 8. Deploying Tangerine for Offline (or Online) Data Collection 32 Android Installation 33 Web Browser Installation 33 9. Download CSV 35 10. Using Tangerine on the Mobile Device 37 Registration and Log in 37 Administrating Instruments 39 Resuming Instrument 40 Syncing Data 41 Appendix A 43 Adding an auto-generated ID 43 Changing the label of an input 44 Filter the location list based on the user profile's location 44 Appendix B 47 How to create new users and add them to a group 47 Importing a location list 47 Location list sample file with IDs 47 Defining a meta data template to present to the user upon selection 47 Add an 'Other, specify' field for a location list 47 Generate an Autogenerated ID field 47 Automatically fill in the date and time fields in a section with the current date 48 Add a two variable tablet report 48","title":"Table of Contents"},{"location":"user-guide/userGuide/#creating-a-new-group","text":"Upon logging into your Tangerine instance, you will see a screen listing your Tangerine groups and/or the opportunity to create new groups. You might think of groups as discrete data collection efforts that might contain several instruments or forms. If you have, e.g., a baseline data collection and an endline data collection for the same project, you might make these two different groups. When packaging your instruments into the apk (.apk is the application installation file format for Android devices) for installation on an Android device, Tangerine packages all instruments in a group. Thus, you should set up groups and categorize instruments accordingly. Click \" Create New Group \" in the screen below. {width=\"1.5853652668416447in\" height=\"0.5145833333333333in\"} {width=\"6.263888888888889in\" height=\"1.9701388888888889in\"} Enter a name for your group: all lower case, no space, only letters. {width=\"6.263888888888889in\" height=\"2.379861111111111in\"} WARNING: If you are using the free service you are not able to create new groups. If you are a Tangerine subscriber, the user1 account can be configured to be the only account with permissions to create new groups. If this is desired, please send a request for this configuration to support@tangerinehelp.zendesk.com","title":"Creating a New Group"},{"location":"user-guide/userGuide/#creating-a-new-instrumentform","text":"When you create a group, it will show up in the list groups in your Tangerine instance. Click on the group name to start creating your instruments in Tangerine. When you create a new group, Tangerine automatically creates an example instrument/form. To add a form or instrument, click on the ADD FORM button. {width=\"6.5in\" height=\"4.054581146106736in\"} This will add an entry to the already existing list of forms but with a default name, 'New Form'. You will notice that there is also a User Profile form. This form represents the profile each user has to fill in, after they create their user login details on the tablet. All information that you require in the user profile is attached to each record in the CSV export file. The user profile represents your assessor's information. Click the plus icon {width=\"0.2378543307086614in\" height=\"0.24700240594925635in\"} to create a new record for the form. This can be used for offline data entry. Be careful as this record is saved in the database even if you do not reach the Submit button. Click on the pen icon {width=\"0.2375in\" height=\"0.34146325459317584in\"}to modify the name of your instrument and to start adding/editing instrument sections and items. Click on the print icon {width=\"0.2554702537182852in\" height=\"0.36656714785651795in\"} to open a new printable menu where you can select two of the print details for each item in your instrument. This is the view we often use to quality assure (QA) the instrument or to get a list of variables and their definition {width=\"0.25972222222222224in\" height=\"0.2298611111111111in\"} Click on the copy icon to create a copy of the current instrument. You can copy an instrument to a different group or to the current one. {width=\"0.25972222222222224in\" height=\"0.4097222222222222in\"}Click on the trash icon to delete this form. {width=\"0.25972222222222224in\" height=\"0.22036964129483816in\"}Click on the archive icon to archive an assessment. All archived forms are moved to the bottom of the page {width=\"0.23434055118110236in\" height=\"0.22013888888888888in\"} If a form is archived, click the unarchive button to activate a form. Only active forms are displayed in tablet listing of forms to the assessor. {width=\"0.2798611111111111in\" height=\"0.3in\"} As you will see later, by clicking from this view, you can also access your data. To rename your instrument/form, click on the pen icon for the form, overwrite the \"New Form\" entry under \"Form Title\" and hit \"SAVE\". {width=\"6.5in\" height=\"1.1611111111111112in\"}","title":"Creating a New Instrument/Form"},{"location":"user-guide/userGuide/#editing-instrument-sections","text":"Once you have selected to edit your new or existing instrument/form, you will see a screen like the one below. This view lists the different sections of your instrument. Each section can contain one or more items. On the tablet, items in any one section can be seen on a single screen. The user moves through items by \"scrolling\" down the screen. The user moves through sections by hitting \"Next\" or \"Back\" on the tablet. {width=\"6.5in\" height=\"1.6465277777777778in\"} The form editor provides the interface for adding and editing instrument sections and items. This interface provides controls that make the following actions possible: EDIT HTML - This converts the interface from a WYSIWYG (\"what you see is what you get\") to a HTML code interface PREVIEW -- This control enables you to have a preview of your form in the current state SAVE -- This control allows you to save the form in its current state ADVANCED -- This Control enables you to access the on-open logic and on-change logic. This logic is used for skipping an entire instrument section. ADD SECTION -- This allows you to add a section of items to your instrument. EDIT {width=\"0.20833333333333334in\" height=\"0.20238079615048118in\"} -- This icon opens the interface to edit an instrument section (e.g., add items) DELETE {width=\"0.24434820647419073in\" height=\"0.2519838145231846in\"} -- This icon deletes this instrument section In this view, you can drag sections to reorder them.","title":"Editing Instrument Sections"},{"location":"user-guide/userGuide/#adding-sections-to-an-instrumentform","text":"To add a new section to your instrument, hit \"ADD SECTION\". {width=\"1.107674978127734in\" height=\"0.39807086614173226in\"} The interface allows a drag-and-drop feature which enables reordering of the sections already created. The order in which the sections are listed, is the same as the sequence of screen that will be shown on the tablet.","title":"Adding Sections to an Instrument/Form"},{"location":"user-guide/userGuide/#section-editor","text":"Upon adding a new section, or selecting to \"EDIT\" your instrument section, you will see the section editor screen below. {width=\"6.263888888888889in\" height=\"2.0in\"} If this is a new section, you might give it a section header. Click the pen icon on the right of the blue bar and overwrite the \"...\" under \"title\". Or any other of the configuration options. Then hit SUBMIT to save your edits. {width=\"6.263888888888889in\" height=\"2.14375in\"} SECTION OPTIONS Each one of the sections has a some options that you can control: Show this section in the summary at the end -- mark only if this section is the last one , and if you have coded some summary /feedback otherwise leave unchecked. Hide the back button -- checking this option will remove the Back button from the section when rendered on the tablet. Hide the next button -- hides the Next button on a section. Sometimes advancing the page may depend on the selection of an item, just like it is on some EF inputs. Generally, you keep this unchecked. right-to-left orientation -- switches the position of the Back and Next buttons for RTL languages. Hide navigation labels -- Hides the label from the Back and Next buttons so that it becomes an arrow. Hide navigation icons -- Hides the arrow from the back and Next buttons. If both this and the above are checked you will only see an orange button without labels and text. Threshold: Number of incorrect answers before disabling remaining questions -- This option is used in conjunction with radio button questions only . Set it to the number of consecutive incorrect replies before the test is discontinued. You must mark an option in the radio button group as Correct for this to work . Only one correct option per question can be defined. {width=\"1.0373239282589677in\" height=\"0.36828083989501315in\"} To add an item to your instrument section, click This opens the item type selection interface. {width=\"6.263888888888889in\" height=\"1.4375in\"} These elements are subdivided into groups of item types (e.g., inputs, location, lists, misc): Inputs INPUT-DATE: This item type renders a calendar widget on the tablet {width=\"2.0967749343832023in\" height=\"0.35526793525809275in\"} INPUT-TEXT: This item type is a standard numbers and letters field {width=\"2.013888888888889in\" height=\"0.4049584426946632in\"} INPUT-TIME: This item type displays a clock hour selection on the tablet {width=\"1.9444444444444444in\" height=\"0.4132228783902012in\"} INPUT-NUMBER: This item type opens up the number keyboard on the tablet and doesn't allow any other non-number characters to be inserted here {width=\"2.361111111111111in\" height=\"0.43801727909011373in\"} Location GPS: This item type automatically collects GPS coordinates of the tablet {width=\"1.0138888888888888in\" height=\"0.36363735783027124in\"} LOCATION: The location item type requires a list of locations, e.g. school names by district and region to be imported to the Tangerine editor. {width=\"1.625in\" height=\"0.4722222222222222in\"} Lists CHECKBOX: This item type allows for multiple answers to be selected from a list of options {width=\"1.7352241907261592in\" height=\"0.39645341207349083in\"} CHECKBOX GROUP: Allows for multiple answer options to be selected from a group of options {width=\"2.5in\" height=\"0.4722222222222222in\"} DROPDOWN (select): This item type allows for a single answer selection for longer lists {width=\"2.7777777777777777in\" height=\"0.4444444444444444in\"} RADIO BUTTONS: This item type only allows for a single answer selection from a list of answer options {width=\"2.1805555555555554in\" height=\"0.4722222222222222in\"} Misc IMAGE: the image items allows you to select an image already uploaded by the media library and present it to the user on a particular section {width=\"1.2808989501312336in\" height=\"0.35810148731408575in\"} SIGNATURE: this input type allows you to capture a signature by the assessor. {width=\"1.441557305336833in\" height=\"0.36313976377952756in\"} HTML CONTENT CONTAINER: This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. {width=\"3.361111111111111in\" height=\"0.4027777777777778in\"} QR CODE SCANNER: This item allows scanning of a QR and Data Matrix codes. Tangerine will capture and save the target info (e.g. URL). {width=\"2.736111111111111in\" height=\"0.4876038932633421in\"} EF TOUCH: This item type is to assess children's executive functions, including working memory, inhibitory control, and cognitive flexibility (requires RTI manual support to upload your images and sounds). {width=\"1.7083333333333333in\" height=\"0.46281058617672793in\"} TIMED GRID: This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. {width=\"1.7222222222222223in\" height=\"0.4722222222222222in\"} UNTIMED GRID: This item type facilitates assessment approaches that are not timed, but require many items, e.g. oral counting, untimed reading comprehension tasks, etc. {width=\"2.2083333333333335in\" height=\"0.5138888888888888in\"} CONSENT: This item is a special function for participant consent. If the participants responds that no consent is given, the form will be closed and data saved accordingly. {width=\"1.7916666666666667in\" height=\"0.4722222222222222in\"} Depending on the element chosen, an interface for providing more detail on the item being rendered/created is presented in the Item Editor.","title":"Section Editor"},{"location":"user-guide/userGuide/#copying-items","text":"If you have an element and/or content which is the same as a previous element (e.g., radio buttons) that you would like to insert into your instrument quickly, without having to click \"INSERT HERE\" again, there is a COPY feature that you can use to do this. First, enter your original content (e.g., variable name, labels, and values) and then click SUBMIT . Once the first step is complete, next you click on the {width=\"0.34375in\" height=\"0.28125in\"} icon. Doing so automatically creates a duplicate of all your original content, except the variable name, which you will need to edit, if desired. In the image below, you can see that all duplicates are auto-populated with the name \"widget,\" followed by an underscore, and a mix of letters and numbers (always different from the previous copy). If you would like to, you can edit all the content of the copy to fit your needs. {width=\"6.40625in\" height=\"2.625in\"}","title":"Copying Items"},{"location":"user-guide/userGuide/#item-editor","text":"The item editor screen is similar for many of the item types. It usually contains the following elements: {width=\"5.463865923009624in\" height=\"4.081395450568679in\"} Variable name : This name has to be unique for any instrument/form, as this will be used for the CSV data output as column header with each observation/child assessed/interview being a row. Avoid special characters and spaces, use lowercase only (e.g., \"age\"). Label : This will be the item label/name that will be displayed to the user (e.g. \"How old are you?\") Question number : If you input a number in here, you will see that the entire questions is moved to the right and the question number stands out when looking at the page. Use this if you are looking for a visual effect like this. Hint Text : This field allows you to add text that acts as a hint for the user (e.g., \"Enter child's age or year of birth, if known\") Show if : This is the place to enter item-level skip logic (see section 5 of this manual). Required: Selecting this checkbox marks the element as a required field. This ensures that users will enter a value before proceeding to other instrument sections or finalizing the instrument/form. Disabled : Selecting this checkbox marks the element as inactive. The item is visible to the user on the tablet, but its value cannot be changed. Hidden: Selecting this checkbox makes the element inactive AND invisible on the tablet.","title":"Item Editor"},{"location":"user-guide/userGuide/#gps-item","text":"Use the GPS item to record the location (longitude & latitude) of the user while filling in the instrument/form. We suggest placing a GPS item always in its own section. Do not combine with other items. When selecting to add an item of the GPS type, Tangerine presents the below item editor screen. {width=\"6.263888888888889in\" height=\"5.3902777777777775in\"} The following might be a way to configure this item: Variable name : Enter \"gps\". Hint Text : Leave blank Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. {width=\"6.263888888888889in\" height=\"0.85in\"} On the tablet this item will look like this: {width=\"6.263888888888889in\" height=\"1.3881944444444445in\"}","title":"GPS Item"},{"location":"user-guide/userGuide/#location","text":"This item type offers a dropdown listing of predefined location information such as, e.g., region, district, and school name. Before you add this item to your form, you need to upload a location list and configure Tangerine: To see a video of how to do this, please go to Appendix B First, decide what levels you would like to show and prepare a CSV file that contains your locations accordingly. Each column header will present a location level (e.g. column A header might be region; column B header might be district, etc.). Make sure each level/column header contains only a single word and no spaces. Second, define the location levels for Tangerine. Click on the tab \"MANAGE LOCATION LIST LEVELS\" located at the top of your group's main page that lists your instruments/forms. {width=\"6.263888888888889in\" height=\"0.47244094488188976in\"} Click \"Create a New Location Level\". {width=\"6.5in\" height=\"1.1538003062117235in\"} On the next screen, enter the name of the \"highest\" location level under \"Label\" (e.g. region). Repeat this process for all other location levels, however, for each \"child\" level, select which is the parent level. E.g. in the case of district, the \"Parent Level\" would be \"region\", and so forth. Hit \"Submit\" to save. NOTE: You cannot delete location levels. Be careful and deliberate as you define them for your group. If you made a mistake or need to make changes, contact the Tangerine helpdesk. {width=\"6.5in\" height=\"2.667465004374453in\"} Next, navigate to the \"MANAGE LOCATION LIST CONTENT\" tab and select \"Import Location List\". Double check that your CSV file contains only those columns that you have defined as levels and spelled exactly the same! Once you selected the CSV, Tangerine will ask you to map the location levels you already defined to the column headers found in your csv file. {width=\"6.5in\" height=\"3.136111111111111in\"} Click on the small arrows to select the matching column header. For each ID field, select \"Map a column to a level and select \"AutoGeneratedID\" for the ID as shown in the example below. {width=\"6.5in\" height=\"1.2909722222222222in\"} Then click \"Process CSV\" as shown in the screen above. Once processing is completed, you will receive a notification like this: {width=\"5.0236220472440944in\" height=\"0.9875492125984252in\"} Once you have successfully uploaded a location list and prepared Tangerine, you can add the location item to your form. The following might be a way to configure this item, once you completed the above steps. If you think that your location list may change significantly, and you'd like to re-upload it at some point thus not implementing any changes manually, consider adding manual IDs to your location file. In the instruction above, you saw how to add the Autogenerated ID that Tangerine inserts. These IDs, however, are not persisted when you re-upload your location file. In such cases, where you know that you'd rather re-upload the entire file, we recommend that you insert an ID column and you preserve those IDs across versions of your location list. By doing that you ensure that any matching on location IDs (and not on Location labels) will be persisted. To upload a location file with IDs, first create those IDS in the Excel file. Then, on the Map location field instead of selecting Autogenerated ID, select the column representing the ID for the corresponding level. WARNING: Upon wiping out the location list when you have not generated the location IDS, all previous results collected will be missing the labels for those location and will contain only the old IDs; all data on the tablets under the Visits tab will show the ID rather than the label. This is why we highly recommend altering the location list manually or maintaining the IDs across different version of the location list in your Excel file. Check out this Excel file to see a location list with IDs that you can import in Tangerine. The formula for generating the IDs can be copied to your own file: http://bit.ly/2WzcTnB {width=\"4.427083333333333in\" height=\"4.485416666666667in\"} Variable name : Enter \"location\". Hint Text : Leave blank Show levels (ex. county,subcounty): Enter \"province,district,school\" Show if : Leave blank Valid if : Leave blank Required: Select this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Show meta-data: Leave blank Hit \" SUBMIT \" to see the below item added to the section editor. On the tablet this item will look like this: {width=\"4.479166666666667in\" height=\"0.3850404636920385in\"} {width=\"4.479338363954506in\" height=\"1.624760498687664in\"} NOTE : Without a location list, no location will be displayed, and the item will be seen as \"loading\".","title":"LOCATION"},{"location":"user-guide/userGuide/#checkbox-group-checkbox-radio-buttons-or-dropdowns","text":"This item type lets you define a checkbox item that lets a user pick one or more options. The following might be a way to configure this item: {width=\"3.1875in\" height=\"3.7354166666666666in\"} Variable name : Enter \"books\". Label: Enter \"What kind of books do you like to read?\" Hint Text : Enter \"Tick all that apply\" Show if : Leave blank Valid if : Leave blank Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Value (answer option): Enter the data value for the first answer option, e.g., \"0\" Label (answer option): Enter the label for the first answer option, e.g., \"None\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"1\" {width=\"3.1798611111111112in\" height=\"0.9777777777777777in\"} Label (answer option): \"Storybooks (fiction)\" Hit \"ADD ANOTHER\" to add additional answer options, e.g.: Value (answer option): \"2\" Label (answer option): \"Books about real things (non-fiction) When done adding all answer options, hit \" SUBMIT \". On the tablet this item will look like this: {width=\"4.908562992125984in\" height=\"2.1185181539807525in\"} NOTE: The item type \"CHECKBOX\" only adds a single checkbox to the form, with the item label being the answer option label. {width=\"4.8977012248468945in\" height=\"3.4148151793525807in\"} On the tablet this single checkbox item will look like this: {width=\"6.263888888888889in\" height=\"0.46729002624671917in\"} {width=\"6.263514873140857in\" height=\"0.3925240594925634in\"}","title":"CHECKBOX GROUP (Checkbox, Radio Buttons, or Dropdowns)"},{"location":"user-guide/userGuide/#radio-buttons","text":"Radio buttons are an item type used for items that allow for only one answer. The configuration for radio buttons is the same as for checkbox group with one exception. You will see that radio button options have a checkmark to indicate which answer is correct . This is used in conjunction with the Threshold defined in the section header. {width=\"2.8986111111111112in\" height=\"2.987800743657043in\"} When you have a threshold defined as 4, and for each question there is only one question option defined as correct, Tangerine will discontinue (hide the questions) after 4 consecutive replies are given as not correct. You can use this in EGMA tasks or in any other scenario where this makes sense On the tablet the radio button item will look like this: {width=\"6.263888888888889in\" height=\"1.28125in\"}","title":"RADIO BUTTONS"},{"location":"user-guide/userGuide/#dropdown","text":"Dropdown is an item type used for items that allow for only one answer to be picked from a dropdown list of items. This item type is convenient when there are many options to choose from. The configuration for a dropdown item is the same as for checkbox group. On the tablet the dropdown item will look like this: {width=\"6.263888888888889in\" height=\"1.2756944444444445in\"}","title":"DROPDOWN"},{"location":"user-guide/userGuide/#timed-grid","text":"This item type facilitates timed assessment approaches, e.g., to assess letter sound knowledge, oral reading fluency or math operations. The following might be a way to configure this item: Variable name : Enter \"letter_sound\". Number of columns: Enter the number of columns by which you'd like to organize the items. Enter, e.g. \"4\" (Tip: choose less columns for larger items, like words or operation problems) Hint Text : Leave blank Auto Stop : The autostop field defines the number of consecutive incorrect items, starting from the first one, after which the test stops automatically. For example, with an autostop value of 10, if a child has the first 10 items all incorrect, the test will stop. If a child has the first 4 items correct and then the following 10 items incorrect, the test will not autostop. {width=\"4.808333333333334in\" height=\"5.261805555555555in\"} Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark and entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Selecting this checkbox to make this a required field. Disabled : Leave blank Hidden : Leave blank Duration in seconds: Enter the time allowed to complete this assessment, e.g. \"60\" for 60 seconds or one minute. Options (each option separated by a space) : Enter all grid items here. Separate each item by a space from the next; if you have extra spaces please remove them! When done adding all answer options, hit \" SUBMIT \". NOTE: For these kids of assessments there are usually instructions preceding the assessment items. Insert those instructions as a \"HTML CONTENT CONTAINER\" item first, as shown below, followed by the \"TIMED GRID\" in the same section. We recommend to only feature the instructions (HTML Content) and Timed Grid in any one section of your instrument/form On the tablet the timed grid item will look like this: {width=\"4.25in\" height=\"3.78125in\"} .","title":"TIMED GRID"},{"location":"user-guide/userGuide/#html-content-container","text":"This item type allows for flexible integration of headers, help text, or transition messages that do not require any user input or response. You can treat this container as a variable and hide or show different instructional text upon the selection of different options. The following might be a way to configure this item: Variable name : Enter \"Assessor instructions\". Show if : Leave blank Valid if : Leave blank Mark entire rows: This option allows the user to mark an entire row of items as incorrect (e.g. if a child skipped an entire row of sounds in a letter sound assessment) Required: Leave blank Disabled : Leave blank Hidden : Leave blank Rows 1-X : Insert assessor instructions, use html tags to insert line breaks or formatting (e.g. \\<br> for a line break; \\<b>text\\</b> for bolding a piece of text, etc.). When done adding all answer options, hit \" SUBMIT \". {width=\"4.5in\" height=\"4.15in\"} On the tablet this HTML container item will look like this: {width=\"3.5395833333333333in\" height=\"4.262505468066491in\"}","title":"HTML CONTENT CONTAINER"},{"location":"user-guide/userGuide/#on-open-on-change-skip-logic-editor","text":"Every instrument/form, section, and individual item provides an interface for adding logic, e.g. skip logic, that controls the interactivity and presentation of the instrument, section, or item.","title":"On-Open / On-Change (Skip) Logic Editor"},{"location":"user-guide/userGuide/#logic-at-instrumentform-level","text":"At the instrument/form level, accessing this logic editor is via advanced settings in the section editor. {width=\"6.5in\" height=\"1.5645833333333334in\"} Click on ADVANCED to see the screen below with \"on-open\" and \"on-change\" entries. {width=\"6.263888888888889in\" height=\"1.58125in\"}","title":"Logic at instrument/form level"},{"location":"user-guide/userGuide/#logic-at-section-level","text":"At the section level, the logic editor can be accessed by editing the Section Details clicking the pen icon on the right of the blue bar (where one can also rename the section). {width=\"6.263888888888889in\" height=\"2.1243055555555554in\"}","title":"Logic at section level"},{"location":"user-guide/userGuide/#logic-at-item-level","text":"As outlined earlier, at the item level , such logic can be added in the \"Show if\" field in the item editor. {width=\"6.263888888888889in\" height=\"0.9034722222222222in\"}","title":"Logic at item level"},{"location":"user-guide/userGuide/#on-open-and-on-change","text":"{width=\"5.11in\" height=\"3.83in\"}As the name suggest, on-open logic is only executed when the form is opened whereas on-change logic is always executed whenever a change happens in the whole form. When selecting on-open logic either at the instrument/form level or in the section editor, the following screen appears. The interface allows JavaScript logic to be incorporated into the instrument.","title":"On-open and on-change"},{"location":"user-guide/userGuide/#skip-logic-examples","text":"You want to skip an entire section: Navigate to and select the \"on-change\" at the instrument/form level. This logic will not work if you insert it in a section (it must be defined on form level) In this example, the section gets skipped based on responses from a previous item, e.g., if the respondent answered negatively to a previous question \"Do you have children?\". Note that the sectionID is provided in Tangerine in the section details as shown below. Form level skip logic is used to present or hide an entire section page to the user. This is very useful when managing a workflow and you need to display some sections but hide others according to the selected option for a question. For example, you can show a certain section only for grade 1 and hide it if grade 2 is selected. {width=\"6.5in\" height=\"0.7222222222222222in\"} if(getValue(\\'children\\') == \\'1\\') {sectionEnable(\\'item_1\\')} else {sectionDisable(\\'item_1\\')} You want to hide a set of items based on responses to an item in a previous section: Navigate to and select the \"on-open\" at the section level. In this example several items in this section are hidden based on the participant's response to the item about the child's schooling experience in a previous section. if(getValue(\\'school\\') == \\'1\\') {itemShow(\\'grade\\') itemShow('repeatedgrade') itemShow('dropout')} else {itemHide(\\'grade\\') itemHide('repeatedgrade') itemHide('dropout')} You want to hide a set of items based on responses to two items in a previous section: Navigate to and select the \"on-open\" at the section level. In this example the item \"teachers_name\" should only be shown if the participant's previous response to \"teacher_available\" was yes = 1 AND if the participant' previous response to \"class_selected\" was \"1\". if(getValue(\\' teacher_available\\') === \\'1\\' && getValue(\\'class_selected\\') === \\'1\\' ) {itemShow(\\'teachers_name\\')} else {itemHide(\\'teachers_name\\')} The Logic interface offer syntax highlighting. This is handy when you have errors in your code. Below is an example of an error and sample message. {width=\"6.003898731408574in\" height=\"1.0694444444444444in\"} You want to skip an item: Navigate to the \"Show if\" in the Item Editor. {width=\"6.263888888888889in\" height=\"0.9034722222222222in\"} In this example this item (e.g., \"Which grade did you repeat?\" will ONLY be shown if the response to the previous item (e.g., asking about whether the person ever repeated a grade) was \"yes\" (data value 1). getValue(\\'repeatedgrade\\') == \\'1\\' Alternatively, for a preceding question that had \"Other\" as an answer option, the logic here might look like this: getValue(\\'q10\\') == \\'9\\' Other examples might include a specific value of a preceding item. Use the below example for questions of type checkbox group, where more than one answer can be selected. getValue(\\'q12\\').includes(\\'5\\') \\ NOTE: The skip logic commands used in Tangerine are case-sensitive and space-sensitive. You must type precisely the name of the variables which you want to reference. NOTE: Use single straight quotation marks to demarcate variables names \\', do NOT use single slanted quotation marks ' or double quotation marks \".","title":"(Skip) Logic Examples"},{"location":"user-guide/userGuide/#skip-logic-with-grid-specific-functions","text":"You may be in the situation where you are required to perform a skip based on some results from a grid. We provide four functions that you can use in your skip logic to show or hide questions or sections based on the results of a grid. Showing a question based on the number of attempted items on a grid If you'd like to hide a question when the number of attempted items on a particular grid is over a certain threshold you can make use of the 'numberOfItemsAttempted(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show it only when the number of attempted items on the grid is greater than 10 numberOfItemsAttempted(inputs.letter_sound) > 10 Showing a question based on the number of correct items of a grid Sometimes it may be the case where you want to show a question only if there are a certain N items on the grid answered correctly. In those cases, we make use of the 'numberOfCorrectItems(input)' function. If your grid variable is 'letter_sound' and the question you want to skip is 'Q_1' then in the question Q_1 I can insert the below skip logic(under Show If) to show this question only when the number of correct items on the grid is greater than 0 numberOfCorrectItems(inputs.letter_sound) > 0 Show a question only if the grid did not auto stop If you have set the autostop value of a grid with variable name 'letter_sound' and you want to show a question only when the grid did not discontinue due to a triggered auto stop, then you can insert the below logic into the question's Show If field: inputs.letter_sound.gridAutoStopped The use of the '!' gives us the opposite of the result returned by the function. If the grid stopped the result will be true. When we use the '!' in front of the function, it means that, when the grid did not stop we want a positive answer hence show the question. Show a question based on the words per minute read on a grid It may happen that you need to show a question only to advanced students. In those cases, we make use of the function 'itemsPerMinute(input)' This function returns the number of items per minute read by the student. We can use it, just as before, in the Show If input field of a question, like so: itemsPerMinute(inputs.letter_sound) > 35 This call will force a question to be displayed only when the rate of reading was higher than 35 workds per minute. NOTE: All of the above functions can also be used to show or a hide an entire section page.","title":"Skip logic with grid specific functions"},{"location":"user-guide/userGuide/#field-validation","text":"Tangerine provides the option to check the validity of an input field. Navigate to the \" Valid if \" field in the Item Editor.","title":"Field Validation"},{"location":"user-guide/userGuide/#field-validation-examples","text":"If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input.value.length > 9 {width=\"5.450694444444444in\" height=\"2.7984667541557307in\"} Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt(input.value) \\<= inputs.boys_enrolled.value {width=\"5.45097987751531in\" height=\"2.7974037620297465in\"} If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input.value >= 0 && input.value \\<= 10 || input.value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 (!getValue(\\'TQ1\\').includes(\\'888\\') && !getValue(\\'TQ1\\').includes(\\'0\\')) || (getValue(\\'TQ1\\').includes(\\'888\\') || getValue(\\'TQ1\\').includes(\\'0\\')) && getValue(\\'TQ1\\').length == 1","title":"Field Validation Examples"},{"location":"user-guide/userGuide/#the-instrumentform-html-editor","text":"The Form HTML Editor provides a high-level interface to the form creation or modification of an entire instrument or form. We suggest avoiding this interface unless familiar with JavaScript, CSS and HTML5. This view allows direct editing of instrument properties for advanced users. {width=\"6.263888888888889in\" height=\"5.166666666666667in\"}","title":"The Instrument/Form HTML Editor"},{"location":"user-guide/userGuide/#deploying-tangerine-for-offline-or-online-data-collection","text":"Once the user is done creating the instruments/forms the next step is to deploy the instrument to an Android device for data collection. To release your instruments or instrument updates, select the \"Release\" tab in the top menu of the main group page. {width=\"6.263888888888889in\" height=\"2.104861111111111in\"} Upon selecting \"Release\", you will see the screen below. {width=\"6.263888888888889in\" height=\"1.7819444444444446in\"} Tangerine offers two deployment types, test release and live release: Test Release -- This release option (\"release to QA\") is recommended for testing the instruments. When you make changes and updates to the instruments and release your changes as \"Test Release\", tablets that have the \"real\" version of Tangerine installed will NOT receive this update. HOWEVER, any data synced from the tablet devices even in a \"Test Release\" deployment goes into the main database (thus mark your tests clearly as \"TESTS\" to facilitate data cleaning. Live Release -- When instruments/forms are final, or instrument edits have been tested, use this release option (\"release to production\"). In this case, tablets that are already collecting data, or have the group's apk installed, will received an update request when connecting to the Internet the next time. All data collected from this release will also be added to the main database. Tangerine also offers two deployment /installation strategies, Android installation or web browser installation: Android Installation . This is the standard deployment package where an actual apk file can be generated on the computer, downloaded, and then copied over to a mobile device via a USB cable and installed. This method of deployment is suitable in slow network environment or when the apk is large. Web Browser Installation . This deployment strategy requires an Internet connection on the tablet for the Tangerine to be installed. Once installed, the app can work again offline. This method is suitable in places of good connectivity. NOTE : We recommend thoroughly testing your instruments and its data output before releasing them!","title":"Deploying Tangerine for Offline (or Online) Data Collection"},{"location":"user-guide/userGuide/#android-installation","text":"This deployment strategy creates an APK file which can be installed on an Android tablet or smartphone. Click on Android Installation Test Release/Live Release as shown in the screen above. Wait. {width=\"6.263888888888889in\" height=\"0.6847222222222222in\"} Once Tangerine has compiled the apk, click on \"Download your APK here\", as shown below. This will download an apk file into your computer's downloads folder. {width=\"6.263888888888889in\" height=\"0.508928258967629in\"} NOTE: Every time an instrument/form is changed, added, or deleted from the group, it is necessary to create a release and alert each tablet user to use the \"Check for Update\" option in order to update their application.","title":"Android Installation"},{"location":"user-guide/userGuide/#web-browser-installation","text":"This deployment strategy creates a link/URL to a \"progressive web app\" (PWA) for direct installation from the web to the Android tablet or smartphone. Click on Web Browser Installation Test Release/Live Release. Wait. Once Tangerine has compiled the PWA, it will show an installation URL like in the screen below. {width=\"6.263888888888889in\" height=\"0.7569444444444444in\"} Use this URL from the Chrome browser on the tablet to install the PWA on the tablet devices. You can also copy the URL and open a new browser tab with this URL on your computer to test your instruments online. The browser window may require you to confirm that you want to apply the updates. {width=\"6.263888888888889in\" height=\"2.9854166666666666in\"} After \" Click here to proceed \", Tangerine will show an online data collection version of your instruments with a similar look and function as on a tablet/smartphone. {width=\"6.263888888888889in\" height=\"2.165277777777778in\"} {width=\"3.8993055555555554in\" height=\"2.464583333333333in\"} NOTE : Every time an instrument/form is changed, added, or deleted from the group, it is necessary to release the apk/pwa again, but NO NEW INSTALLATION is necessary on the tablets. Instead, instruct Tangerine tablet users to connect their tablets, select their profile page (3 vertical white dots on top right of tablet screen). Select \" Check for Update \" and proceed to install the update. {width=\"2.0555555555555554in\" height=\"2.4929571303587053in\"} NOTE: This update approach will not only apply any instrument/form edits, new forms, or form deletions, but also any updates to the Tangerine application made in the meantime and applied to your group (if any).","title":"Web Browser Installation"},{"location":"user-guide/userGuide/#download-csv","text":"As mentioned earlier, on the group's main page listing the instruments/forms for the group, Tangerine provides a download CSV function on the main Tangerine editor page. {width=\"6.263888888888889in\" height=\"2.047222222222222in\"} Click the download icon {width=\"0.20402340332458443in\" height=\"0.21039916885389326in\"}to see the interface below. From here, you can select the results for a specific month or year of data collection. {width=\"6.263888888888889in\" height=\"1.8118055555555554in\"} NOTE : To be able to download all the data select the * on both Month and Year and click the SUBMIT button. If the CSV generation was successful, the following screen will present the group name, Form id , Start time and progress of the CSV download. {width=\"6.263888888888889in\" height=\"1.2673611111111112in\"} Once the CSV has been created, you can find it in your Downloads folder.","title":"Download CSV"},{"location":"user-guide/userGuide/#10-using-tangerine-on-the-mobile-device","text":"{width=\"2.6166666666666667in\" height=\"4.18125in\"}When using \"Android Installation\", install the Tangerine apk upon moving it onto the tablet device. Make sure you have selected \" Unknown sources \" under Settings > Security to allow installation of apps from sources other than the Play Store. When using the \"Web Browser Installation\" strategy, enter the PWA URL generated above into the URL field of the Chrome browser. Upon start of the download process, you will be prompted about \" Adding Tangerine to Home screen \". Confirm this with \"ADD\" on the next prompt. Close your browser and open Tangerine from your device's home screen or app drawer. Do not use the browser link anymore.","title":"10. Using Tangerine on the Mobile Device"},{"location":"user-guide/userGuide/#registration-and-log-in","text":"Have users register on the tablet. This is only required once for each user on a given tablet. {width=\"2.1790551181102362in\" height=\"3.486487314085739in\"} Log in following registration. {width=\"2.9004844706911634in\" height=\"2.5479451006124236in\"} You should now see the main Tangerine screen with your group's instrument listed on the tablet. {width=\"2.6273687664041994in\" height=\"4.203790463692038in\"} NOTE : Hitting the tangerine icon in the top left corner will return the user to Tangerine's home screen.","title":"Registration and Log in"},{"location":"user-guide/userGuide/#administrating-instruments","text":"Select the instrument to use, and follow the prompts, sections, and items on the screen, as generated in the instrument/form editor. To select an answer option, just tab on it. NOTE : Different to all other inputs, where the user/assessor selects the applicable / correct response which will then be marked in blue, in grids, the user has to select all INCORRECT items (they will turn blue). {width=\"2.9583333333333335in\" height=\"4.739583333333333in\"} {width=\"2.96in\" height=\"4.74in\"}","title":"Administrating Instruments"},{"location":"user-guide/userGuide/#resuming-instrument","text":"Should an administration be interrupted, or to be completed at a later stage, navigate to \" Visits \" on the top of the tablet screen. NOTE : You have to have a location section and location list loaded for your instrument to be able to access the resume feature in Tangerine. Make up a location list, even if it only has one column header entry and one item underneath (e.g. column A header is \"site\", row 2 entry is \"test site\". Without a location list loaded, you will not have a \"Visits\" tab on the tablet from which to resume the instrument. {width=\"3.451388888888889in\" height=\"3.0454549431321083in\"} Select the appropriate location and date (as applicable) from the menu. Tangerine will automatically return the user to the last, incomplete section/page of the instrument. {width=\"3.475693350831146in\" height=\"1.9696970691163604in\"} You can return from the \"Visits\" page to the main screen by hitting the Tangerine icon.","title":"Resuming Instrument"},{"location":"user-guide/userGuide/#width20590277777777777in-height22743055555555554insyncing-data","text":"Whenever possible during data collection, recommend that users / assessors to sync their data to the tablet by navigating to the profile menu, and select \" Sync \". The Sync screen provides an overview of the data upload/sync status to date, including the number of responses not yet uploaded as shown below. {width=\"3.518662510936133in\" height=\"3.1515146544181976in\"} Once the sync is complete, Tangerine will show \" 100% \" for the field \" Percentage uploaded \". {width=\"3.45in\" height=\"3.1515146544181976in\"}","title":"{width=\"2.0590277777777777in\" height=\"2.2743055555555554in\"}Syncing Data"},{"location":"user-guide/userGuide/#appendix-a","text":"In this appendix we will show you how to do certain things that require more technical knowledge or experience with Tangerine","title":"Appendix A"},{"location":"user-guide/userGuide/#adding-an-auto-generated-id","text":"An autogenerated student or teacher ID is something that you may need to add to each one of your instruments. In the example here I will show you how to add an ID field that is already populated upon opening the page. Here are the steps to set this up: Create an input field of type TEXT and type in 'student_id' as its name. Mark this field as required and click save. Copy and paste the code that I have before into the on-open section logic Go the section where you'd like to add a student id. This new field doesn't have to be in a separate section and can be part of the Student Information page. Click the Insert Here button, to add a new input, and select TEXT under the first Inputs column. On the next page under name type in student_id {width=\"4.9875in\" height=\"2.281674321959755in\"} Add a label and any other information you'd like for this field and save it. Now click the Edit icon on the top left of the section header Click the 'on-open' text link to edit it and paste the below code inside the field: function makeid() { var text = \\'\\'; var possible = \\'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnpqrstuvwxyz0123456789\\'; //change 6 to the desired length of the ID for (var i = 0; i \\<= 6; i++) text += possible.charAt(Math.floor(Math.random() * possible.length)); return text; } //If your variable is not called student_id change it in both occurances below if (inputs.student_id.value == \\'\\') inputs.student_id.value = makeid() You should see something like this on your screens {width=\"6.089588801399825in\" height=\"3.05in\"} Click the Submit button to save the change. If you deploy this form now you will see that upon opening this section the ID is generated and already inserted into the student_id variable. You can use this file to help you generated the code that you need: http://bit.ly/2JBk2P3","title":"Adding an auto-generated ID"},{"location":"user-guide/userGuide/#changing-the-label-of-an-input","text":"In some situations, you may wish to change the label of an input as to give different instruction or to add a variable name to it (like some calculation or the result of a previous selection). You can easily do this by following the below steps Add the question that you wish to change Add code and/or calculations to change the label in the on-open event of a section Let's first add question with variable name Q_10. Now, let's assume that you want to change the label for this question based on some calculation, and we want to add the result of the calculation to the label. Go to the on-open event on the section containing Q_10. Add the below code and click Submit: var calc = getValue(\\'teachers_present\\')/getValue(\\'teachers_enrolled\\') inputs.Q_10.label = \\'The teacher ratio is#\\' + calc + \\' Please keep this in mind when answering the below question.\\' What am I doing above? First I calculate some ration of teachers present vs teacher enrolled, which I've collected on a previous form. Then I make this ratio part of the label for questions Q_10. If you'd like to only assign a certain label without calculating anything you can do this: inputs.Q_10.label = \\'Previously you responded that there are #\\' + getValue(\\'teachers_present\\') + \\' teachers present. How many of them were prepared for class?\\'","title":"Changing the label of an input"},{"location":"user-guide/userGuide/#filter-the-location-list-based-on-the-user-profiles-location","text":"Let's assume that you have a location list with levels Region, District, and School. Now let's also assume that on the user profile page, you have added a location input with levels Region and District. You have also asked each assessor to select their district on the user profile page, after they have logged in. Your user profile page looks like so: {width=\"4.0625in\" height=\"3.3806419510061243in\"} Note above how the levels defined for this location input are Region and District. On the actual assessment form your location levels include the full hierarchy, for example, Region, District, and School. There is one more option that I want to check here which is \"Filter by locations in the user profile\" In the assessment form make sure that your data is like the example below: {width=\"4.071112204724409in\" height=\"1.8368339895013124in\"} What will enabling the filter on the assessment form do? It will display only the district that this user has selected under their user profile. This makes the selection of a school much easier in a list with a lot of regions and districts. Let's see how it works on the tablet. When filling in my user profile I will select the 'Kilolo DC' district {width=\"3.4875in\" height=\"4.340765529308836in\"} Now every time start a form containing a location input in it, I will only see the district that I selected on the user profile and no other regions or districts will be given to me for selection. By doing this, you ensure that the assessor will never select a school with the same name form a different district or make a selection that doesn't correspond to their actual location. {width=\"5.2in\" height=\"1.9103783902012248in\"} Note how in the above screenshot, there is only one district showing up. Under the region selection we also see only the region that the Kilolo DC district belongs to.","title":"Filter the location list based on the user profile's location"},{"location":"user-guide/userGuide/#appendix-b","text":"In this appendix we will link some video tutorials and helper files that you can use to have a live example on how to do certain things with Tangerine","title":"Appendix B"},{"location":"user-guide/userGuide/#how-to-create-new-users-and-add-them-to-a-group","text":"See how to create a user and add them to a group. https://youtu.be/_gYGC2_J2EU","title":"How to create new users and add them to a group"},{"location":"user-guide/userGuide/#importing-a-location-list","text":"Make sure that the column names in your Excel exactly match the levels define in Tangerine (Including any capital letters) The part about importing metadata for your location is optional. You do not have to define metadata if such is not used in your scenario https://youtu.be/RSJmNu7ef3U","title":"Importing a location list"},{"location":"user-guide/userGuide/#location-list-sample-file-with-ids","text":"In this file you will find out a sample location list with the IDs generated by Excel. You can use the formula for generating the Ids if your file does not contain such. http://bit.ly/2WzcTnB","title":"Location list sample file with IDs"},{"location":"user-guide/userGuide/#defining-a-meta-data-template-to-present-to-the-user-upon-selection","text":"If you do decide to use metadata, you need the part below in order to display some/all of it to the data assessor. If you are not displaying this information to the tablet user it will still end up in your CSV file. https://youtu.be/M83zFwtR-4A Adapt the line below to fit yoru metadata and level information so that this is printed to the assessor \\${node.level === \\' LEVEL_VARIABLE \\' ?` EMIS: \\${node. META_DATA_VARIABLE }`:\\'\\'} Replace the bold text with your corresponding level and meta data variable. Make sure you enable the metadata for the location input and paste this code as content.","title":"Defining a meta data template to present to the user upon selection"},{"location":"user-guide/userGuide/#add-an-other-specify-field-for-a-location-list","text":"In this video we show you how you can add an 'Other' field for a location list. To help you generate the code we also use another helper file for this. https://youtu.be/obTQusAKeRM The helper file to generate the necessary code is located at http://bit.ly/2DLy3Xa","title":"Add an 'Other, specify' field for a location list"},{"location":"user-guide/userGuide/#generate-an-autogenerated-id-field","text":"This helper file will help you generated the code for your autogenerated ID http://bit.ly/2JBk2P3","title":"Generate an Autogenerated ID field"},{"location":"user-guide/userGuide/#automatically-fill-in-the-date-and-time-fields-in-a-section-with-the-current-date","text":"This helper file will help you generate the code required to automatically fill in the date and time fields located in the same section with the current date and time on the tablet. Hint: to prevent the user from changing these values you can mark the inputs as Disabled http://bit.ly/2PSJbZC","title":"Automatically fill in the date and time fields in a section with the current date"},{"location":"user-guide/userGuide/#add-a-two-variable-tablet-report","text":"You can make use of the helper file located at http://bit.ly/2Yi8PsF to generate the code for a two variable tablet report like in the image below. This report shows you the count of occurrence of the two variables per day Refer to the instructional video at https://youtu.be/ne5pZkWvjKY {width=\"5.810126859142607in\" height=\"2.8633639545056866in\"}","title":"Add a two variable tablet report"},{"location":"user-guide/usingTangerine/","text":"Using Tangerine outside of the box \u00b6 Here you will see how you can use Tangerine beyond EGRA/EGMA assessments or sruvey. Timed observations \u00b6 It maybe the case where you would like to observe what is happening in the classroom every 5 mins and answer a series of questions during this time. Once the timer runs out the next observation interval starts. This scenario is doable out of the box with Tangerine. Here are the steps to follow to implement a timed interval observation: Create the start page(s) - here you can collect the begin time, the gps coordinates, the location input, or anything else that pertains to the observation. Create the questions you want to answer each X seconds/minutes. Make sure they are all optional (not required). Insert an EF Touch input which will control the time limit. Insert a question to control if the observation should terminate early. In our example we have also inserted a JS script to show the count down to the user. Create a last page to collect comments. The codepen code below contains a live version running as an example. You can copy the code from there and paste it into your form. To view the code click Change View and select Editor view. https://codepen.io/lachko/full/BaoZxqv Timed user assessment \u00b6 Add a timed user assessment Self evaluation for students \u00b6 Student self evaluation. ACASI, timed, take photo of work, dictation, listening comprehension, random tasks Anonymous questionnaire reading out loud response options and questions \u00b6 Here is a sample self conducted questionnaire. Here the student sits down with headphones and the tablet answering each survey question. https://codepen.io/lachko/full/vYNJKrL Bundling content \u00b6 EF Touch tasks \u00b6 An executive function task example, where the pupil is asked to click the dot corresponding to the arrow direction. https://codepen.io/lachko/full/KKdqerW Classroom Observation \u00b6 https://codepen.io/lachko/pen/JjYJmLZ","title":"Using Tangerine outside of the box"},{"location":"user-guide/usingTangerine/#using-tangerine-outside-of-the-box","text":"Here you will see how you can use Tangerine beyond EGRA/EGMA assessments or sruvey.","title":"Using Tangerine outside of the box"},{"location":"user-guide/usingTangerine/#timed-observations","text":"It maybe the case where you would like to observe what is happening in the classroom every 5 mins and answer a series of questions during this time. Once the timer runs out the next observation interval starts. This scenario is doable out of the box with Tangerine. Here are the steps to follow to implement a timed interval observation: Create the start page(s) - here you can collect the begin time, the gps coordinates, the location input, or anything else that pertains to the observation. Create the questions you want to answer each X seconds/minutes. Make sure they are all optional (not required). Insert an EF Touch input which will control the time limit. Insert a question to control if the observation should terminate early. In our example we have also inserted a JS script to show the count down to the user. Create a last page to collect comments. The codepen code below contains a live version running as an example. You can copy the code from there and paste it into your form. To view the code click Change View and select Editor view. https://codepen.io/lachko/full/BaoZxqv","title":"Timed observations"},{"location":"user-guide/usingTangerine/#timed-user-assessment","text":"Add a timed user assessment","title":"Timed user assessment"},{"location":"user-guide/usingTangerine/#self-evaluation-for-students","text":"Student self evaluation. ACASI, timed, take photo of work, dictation, listening comprehension, random tasks","title":"Self evaluation for students"},{"location":"user-guide/usingTangerine/#anonymous-questionnaire-reading-out-loud-response-options-and-questions","text":"Here is a sample self conducted questionnaire. Here the student sits down with headphones and the tablet answering each survey question. https://codepen.io/lachko/full/vYNJKrL","title":"Anonymous questionnaire reading out loud response options and questions"},{"location":"user-guide/usingTangerine/#bundling-content","text":"","title":"Bundling content"},{"location":"user-guide/usingTangerine/#ef-touch-tasks","text":"An executive function task example, where the pupil is asked to click the dot corresponding to the arrow direction. https://codepen.io/lachko/full/KKdqerW","title":"EF Touch tasks"},{"location":"user-guide/usingTangerine/#classroom-observation","text":"https://codepen.io/lachko/pen/JjYJmLZ","title":"Classroom Observation"},{"location":"user-guide/validation/","text":"Field Validation \u00b6 Tangerine provides the option to check the validity of an input field. Navigate to the \" Valid if \" field in the Item Editor. Field Validation Examples \u00b6 If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input.value.length > 9 Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt(input.value) \\<= inputs.boys_enrolled.value If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input.value >= 0 && input.value \\<= 10 || input.value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 (!getValue(\\'TQ1\\').includes(\\'888\\') && !getValue(\\'TQ1\\').includes(\\'0\\')) || (getValue(\\'TQ1\\').includes(\\'888\\') || getValue(\\'TQ1\\').includes(\\'0\\')) && getValue(\\'TQ1\\').length == 1","title":"Validation"},{"location":"user-guide/validation/#field-validation","text":"Tangerine provides the option to check the validity of an input field. Navigate to the \" Valid if \" field in the Item Editor.","title":"Field Validation"},{"location":"user-guide/validation/#field-validation-examples","text":"If, for example, the value entered into an \"INPUT-NUMBER\" field should have 9 or more characters, enter the following into \"Valid if\" for this item: input.value.length > 9 Tangerine also allow you to compare the value entered in the current item to a value entered for another, earlier item. This might be the case, e.g. for attendance when observing a classroom. That is, when recording attendance, the number of children present should not exceed the number of children enrolled. Assume that a relevant variable name of the earlier item was \"boys_enrolled\" and the current items is about the boys present, this might be the validation logic to enter under \"Valid if\" for boys_present. parseInt(input.value) \\<= inputs.boys_enrolled.value If you want to validate that a number input is in between a particular range but also allow a 'No Reply' answer, use the below validation rule: input.value >= 0 && input.value \\<= 10 || input.value == 999 Here we make sure that the user can only enter numbers between 0 and 10 but also 999 as a reply to this question. If you have a list of checkboxes with the option No (value 0), NA (value 888), and some other options, and you'd like to make sure that the assessor cannot select the options No or the option NA along with other available options you need to implement a rule like the one below. The variable name in the below example is TQ1 (!getValue(\\'TQ1\\').includes(\\'888\\') && !getValue(\\'TQ1\\').includes(\\'0\\')) || (getValue(\\'TQ1\\').includes(\\'888\\') || getValue(\\'TQ1\\').includes(\\'0\\')) && getValue(\\'TQ1\\').length == 1","title":"Field Validation Examples"}]}